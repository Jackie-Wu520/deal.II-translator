 [2.x.0] [2.x.1]  

本教程取决于 [2.x.2] 。

[1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12][1.x.13][1.x.14][1.x.15][1.x.16][1.x.17][1.x.18][1.x.19][1.x.20 ][1.x.21][1.x.22][1.x.23][1.x.24][1.x.25][1.x.26][1.x.27][1.x.28][1.x.29][1.x.30][1.x.31][1.x.32][1.x.33][1.x.34][1.x.35][1.x.36][1.x.37][1.x.38][1.x.39] 

 [2.x.3]  

[1.x.40] 

[1.x.41] [1.x.42][1.x.43] 


本教程程序介绍了泊松方程的 "弱加勒金 "有限元方法的实现。从某种意义上说，考虑这种方法的动机与[2.x.4]中的观点相同：我们想考虑不连续的形状函数，但需要解决这样一个事实：与通常的连续Galerkin方法相比，所产生的问题有更多的自由度（因为，例如，每个顶点带有与相邻单元一样多的自由度）。我们还必须解决这样一个事实：与连续Galerkin方法不同，[1.x.44]一个单元上的自由度与它的每个面邻单元上的所有自由度相耦合。因此，从 "传统 "非连续Galerkin方法得到的矩阵既大又相对密集。

[2.x.5]中的混合非连续Galerkin方法（HDG）和本教程中的弱Galerkin（WG）方法都是通过引入额外的自由度来解决耦合问题的，这些自由度的形状函数只存在于单元间的一个面上（即。在网格的 "骨架 "上），因此将相邻单元的自由度相互 "隔离"：单元自由度只与同一单元的其他单元自由度以及面的自由度耦合，而不与相邻单元的自由度耦合。因此，这些细胞自由度的形状函数的耦合确实正好耦合在一个细胞和定义在其面上的自由度上。

对于一个给定的方程，例如二阶泊松方程，HDG和WG方法的区别在于如何精确地表述连接所有这些不同形状函数的问题。事实上，对于某些WG和HDG的表述，有可能表明它们是等价的）。HDG的做法是用一阶方程系统重新表述二阶问题，然后在概念上把面的自由度看作是这个一阶系统的 "通量"。相比之下，WG方法保持二阶形式，并将面的自由度视为与主解变量相同的类型，只是限制在低维的面。为了方程的目的，在定义对其应用微分算子的含义时，人们需要以某种方式将这些形状函数 "扩展 "到单元的内部。与HDG相比，该方法的优势在于它不会因为将方程重写为一阶系统而导致未知数的增加，但它也不太容易实现。然而，正如我们将在下文中看到的，这种额外的努力并不令人望而却步。


[1.x.45][1.x.46] 。


弱加尔金有限元方法（WGFEMs）使用离散弱函数来近似标量未知数，使用离散弱梯度来近似经典梯度。该方法最初是由王俊平和叶秀在论文[1.x.47][1.x.48]中提出。与连续Galerkin方法相比，弱Galerkin方法满足重要的物理特性，即局部质量守恒和体法通量连续。它的结果是一个SPD线性系统，通过网格细化可以获得最佳收敛率。


[1.x.49][1.x.50] 

该程序使用弱加勒金有限元方法求解泊松方程。

[1.x.51] 

其中[2.x.6]是一个有界域。在流体流经多孔介质的背景下，[2.x.7]是压力，[2.x.8]是渗透性张量，[2.x.9]是源项，[2.x.10]代表Dirichlet和Neumann边界条件。我们可以引入一个通量，[2.x.11]，对应于达西速度（以我们在[2.x.12]中的方式），这个变量在下面的考虑中很重要。

在这个程序中，我们将考虑一个测试案例，在单位平方域上的确切压力是[2.x.13]，具有同质的Dirichelet边界条件，[2.x.14]是身份矩阵。然后我们将计算压力、速度和通量的[2.x.15]误差。


[1.x.52][1.x.53] 。


上述泊松方程有一个解[2.x.16]，需要满足问题的弱表述，[1.x.54] 。

对于所有测试函数[2.x.17]，其中[1.x.55] 

和[1.x.56] 

在这里，我们以双线性形式进行了部分积分，我们在内部评估[2.x.18]的梯度，在域的边界评估[2.x.19]的值。所有这些都是很好的定义，因为我们假设解是在[2.x.20]中，对它来说，取梯度和评估边界值是有效的操作。

弱Galerkin方法的想法是用一个[1.x.57][2.x.22]来近似精确的[2.x.21]解。这个函数可能只在单元格之间的界面上不连续，由于我们也想沿着界面评估这个函数，我们不仅要规定它在单元格内部应该有什么值，而且还要规定它在界面上的值。我们的做法是，[2.x.23]实际上是一个元组，[2.x.24]，尽管它实际上只是一个单一的函数，它要么等于[2.x.25]，要么等于[2.x.26]，这取决于它是在位于细胞内部还是在细胞界面的点[2.x.27]上被评估。

然后我们想把这个近似值简单地贴到上面的双线性表格中。这适用于我们必须在边界上评估测试函数[2.x.28]的情况（我们只需取其界面部分[2.x.29]），但我们必须小心处理梯度，因为它只在单元内部定义。因此，泊松方程的弱Galerkin方案是由[1.x.58]定义的 

对所有离散测试函数[2.x.30]，其中[1.x.59] 

和[1.x.60] 

关键的一点是，在这里，我们用[1.x.61]算子[2.x.32]取代了梯度[2.x.31]，这对我们特殊定义的近似值[2.x.33]是有意义的。

那么问题是这个算子如何工作。为此，让我们首先说说我们是如何看待压力的离散近似[2.x.34]的。如上所述，"函数"[2.x.35]实际上由两部分组成：单元内部的数值[2.x.36]和界面上的[2.x.37]。我们必须为这两部分定义离散的（有限维）函数空间；在这个程序中，我们将用FE_DGQ来表示[2.x.38]作为细胞内部的空间（在每个细胞上定义，但一般是沿界面不连续的），用FE_FaceQ表示[2.x.39]作为界面上的空间。

然后让我们只考虑一个单元（因为上面的积分都是逐个单元定义的，而且弱离散梯度是逐个单元定义的）。[2.x.40]对单元[2.x.41]、[2.x.42]的限制就由一对[2.x.43]组成。实质上，我们可以认为[2.x.44]是定义在[2.x.45]上的某个函数，它接近于梯度；特别是，如果[2.x.46]是一个可微函数的限制（对[2.x.47]的内部和边界--这将使它在内部和边界之间连续），那么[2.x.48]将只是精确梯度[2.x.49] 。但是，由于[2.x.50]在[2.x.51]的内部和边界之间不连续，我们需要一个更普遍的定义；此外，我们不能处理任意函数，因此要求[2.x.52]也在一个有限元空间中（由于梯度是一个矢量，必须是矢量值的，并且由于弱梯度是在每个单元上单独定义的，因此在单元之间也将是不连续的）。

这样做的方法是以下列方式定义这个弱梯度算子[2.x.53]（其中[2.x.54]是单元格[2.x.56]上阶为矢量值的Raviart-Thomas空间）。[1.x.62] 

为所有测试函数 [2.x.57] 。这实质上是简单地应用了逐段积分公式。换句话说，对于一个给定的[2.x.58]，我们需要把[2.x.59]看作是度数为[2.x.60]的Raviart-Thomas函数，对于这个函数，左手边和右手边在所有测试函数中是相等的。

那么需要说明的关键点是以下几点。通常的梯度[2.x.61]是一个*本地*算子，它仅仅根据一个函数在某一点及其（无限小）邻域的值来计算导数，而弱离散梯度[2.x.62]不具有这种性质。它取决于它所应用的函数在整个单元上的值，包括单元的边界。然而，从上面[2.x.63]的定义中可以看出，两者都是线性算子，这将使我们在下面的讨论中可以通过矩阵来表示[2.x.64]。

 [2.x.65] 可能值得指出的是，虽然弱离散梯度是Raviart-Thomas空间[2.x.66]中每个单元[2.x.67]上的一个元素，但它在单元之间是不连续的。另一方面，定义在整个网格上并由FE_RaviartThomas类实现的Raviart-Thomas空间[2.x.68]代表了在单元间界面上具有连续法线分量的函数。这意味着[1.x.63]，[2.x.69]不在[2.x.70]中，尽管它在[2.x.72]中的每个单元[2.x.71]上。  相反，它是在一个 "破碎的 "拉维亚特-托马斯空间中，下面我们将用符号[2.x.73]来表示。 这里的 "破碎 "一词是指 "把东西打碎 "的过程，而不是指 "没有功能 "的同义词）。因此，人们可能会（理所当然地）争辩说，在弱Galerkin文献中使用的符号有点误导性，但就像很多时候一样，这完全取决于使用某种符号的背景--在目前的背景下，对Raviart-Thomas空间或元素的提及总是被理解为对 "破碎 "空间的提及。

 [2.x.74] deal.II恰好有一个这种破碎的Raviart-Thomas空间的实现。FE_DGRT类。因此，在本教程中，我们将简单地一直使用FE_DGRT类，尽管在所有那些我们必须计算单元格本地矩阵和向量的地方，它没有任何区别。


[1.x.64][1.x.65] 。


由于[2.x.75]是有限元空间的一个元素，我们可以像往常一样在一个基中展开它，即我们可以写出[1.x.66] 

这里，由于[2.x.76]有两个分量（内部分量和界面分量），对于基函数[2.x.77]也必须如此，我们可以写成[2.x.78] 。如果你遵循[2.x.79]、[2.x.80]和[2.x.81]"向量值问题文件模块 "中的描述，就不会奇怪，对于[2.x.82]的某些值，[2.x.83]将为零，而对于[2.x.84]的其他值，[2.x.85]将为零-即，形状函数将是一种或另一种类型。然而，这在这里并不重要。重要的是，我们需要思考如何表示[2.x.86]，因为当我们想实现双线性形式[1.x.67]时，这显然是会出现在问题中的。



关键是[2.x.87]是已知的 "破碎的 "Raviart-Thomas空间[2.x.88]的一个成员。这意味着我们可以（在每个单元[2.x.89]上分别表示）[1.x.68] 。

其中的函数 [2.x.90] ，以及 [2.x.91] 是一个维度为 

[1.x.69] 

弱离散梯度可以被表示为一个矩阵，这不应该是一个惊喜：它是一个从一个有限维空间到另一个有限维空间的线性算子。如果为这两个空间都选择基数，那么[1.x.70]当然可以写成一个矩阵，将与算子的域空间的基数有关的扩展系数向量映射到与图像空间的基数有关的扩展系数向量）。) 

使用这个扩展，我们可以很容易地使用上面的弱离散梯度的定义来定义这个矩阵是什么。[1.x.71] 

为所有测试函数 [2.x.92] 。

这显然导致了一个形式为[1.x.72]的线性系统 

与[1.x.73] 

以及由此产生的[1.x.74]。

在这最后一步中，我们假设指数[2.x.93]只涉及在单元[2.x.94]上活动的自由度，从而确保空间[2.x.95]上的质量矩阵是可逆的）。等价地，利用矩阵[2.x.96]的对称性，我们有[1.x.75]。

另外值得指出的是，矩阵[2.x.97]和[2.x.98]当然不是正方形，而是矩形的。


[1.x.76][1.x.77] 。


在解释了弱离散梯度是如何定义的之后，我们现在可以回到有关方程的线性系统应该如何组装的问题上。具体来说，利用上面显示的双线性形式[2.x.99]的定义，我们就需要计算对全局矩阵的局部贡献的元素，[1.x.78] 。

如上所述，我们可以根据每个单元的Raviart-Thomas基来展开[2.x.100]，同样，对于[2.x.101]：[1.x.79]也是如此。

通过重新排列和，可以得到以下表达式。[1.x.80] 

因此，如果我们有每个单元格[2.x.103]的矩阵[2.x.102]，那么我们可以很容易地计算出[2.x.105]单元格对矩阵[2.x.106]的贡献[2.x.104]如下。[1.x.81] 

这里，[1.x.82] 

实际上只是单元[2.x.107]的质量矩阵，使用Raviart-Thomas基础并通过渗透性张量[2.x.108]加权。这里的推导表明，弱Galerkin方法实际上只需要我们计算每个单元[2.x.109]和[2.x.110]的矩阵，然后计算[2.x.112]，这很容易计算。下面要显示的代码正是这样做的。

在计算出单元格[2.x.114]对全局矩阵的贡献后，我们要做的就是将这些局部贡献 "分配 "到全局矩阵中。如何做到这一点，首先显示在 [2.x.115] 和 [2.x.116] 中。在当前的程序中，这将通过调用[2.x.117]来实现。 

一个线性系统当然也需要一个右手边。除了我们只需要对每个形状函数[2.x.119]使用单元格内部部分[2.x.118]外，这里没有与计算右手边相关的困难。


[1.x.83][1.x.84][1.x.85] 


前面几节的讨论已经给了我们一个线性系统，我们可以解决数值压力 [2.x.120] 。我们可以用它来计算变量[2.x.121]的近似值，如果这是我们要解决的模型，它对应于介质在多孔介质中的流动速度。这种步骤--从离散问题的解中计算一个派生量--通常被称为 "后处理"。

这里，我们不使用[2.x.122]的精确梯度，而是使用[2.x.123]的离散弱梯度来计算每个元素上的速度。如上所述，在每个元素上，数值压力[2.x.124]的梯度可以用离散的弱梯度[2.x.125]：[1.x.86]来近似。



在单元[2.x.126]上，数值速度[2.x.127]可写为 

[1.x.87] 

其中[2.x.128]是上面的扩展矩阵，[2.x.129]是单元上[2.x.130]空间的基础函数。

不幸的是，[2.x.131]可能不在[2.x.132]空间（当然，除非如果[2.x.133]是常数乘以身份矩阵）。因此，为了在有限元程序中表示它，我们需要把它投射回我们可以处理的有限维空间。在这里，我们将使用[2.x.134]投影来将其投射回（破碎的）[2.x.135]空间。

我们将投影定义为[2.x.136]在每个单元[2.x.137]上的投影。对于任何 [2.x.138] , [2.x.139] 所以，与其说是上面的公式，不如说是 [2.x.140] 单元上的数值速度变成了 [1.x.88] 。

我们有以下的系统来解决系数[2.x.141]：[1.x.89] 

在下面的实现中，元素为[2.x.142]的矩阵被称为[2.x.143]，而元素为[2.x.144]的矩阵被称为[2.x.145]。

那么元素速度为[1.x.90] 。

其中[2.x.146]在代码中被称为 "细胞速度"。

使用这个通过 "后处理 "得到的速度，我们可以通过以下公式定义压力、速度和通量的[2.x.147] 误差。

[1.x.91] 

其中[2.x.148]是元素的面积，[2.x.149]是元素的面，[2.x.150]是每个面的单位法向量。这些规范中的最后一条衡量了网格单元之间界面上速度向量的法向分量的精度。缩放因子[2.x.151]的选择是为了随着网格大小的变化，缩放出界面集合的长度（或面积）的差异。

上面的第一个错误很容易用[2.x.152]计算出来，其他的需要更多的工作，在下面的代码中实现。[1.x.92] [1.x.93] 


[1.x.94] [1.x.95] 这个程序是基于[2.x.153]、[2.x.154]和[2.x.155]，所以下面的头文件大部分是熟悉的。我们需要以下文件，其中只有导入FE_DGRaviartThomas类的文件（即`deal.II/fe/fe_dg_vector.h`）是真正的新文件；FE_DGRaviartThomas实现了介绍中讨论的 "破碎 "Raviart-Thomas空间。

[1.x.96] 



我们的第一步，和往常一样，是将与本教程程序相关的所有内容放入自己的命名空间。

[1.x.97] 




[1.x.98] [1.x.99]。




这是本程序的主类。我们将使用弱加勒金（WG）方法求解内部和面上的数值压力，并计算出压力的[2.x.156]误差。在后处理步骤中，我们还将计算速度和通量的[2.x.157] 误差。   


该类的结构与以前的教程程序没有根本的不同，所以除了一个例外，没有必要对细节进行评论。该类有一个成员变量`fe_dgrt`，对应于介绍中提到的 "破碎 "的Raviart-Thomas空间。还有一个与之匹配的`dof_handler_dgrt`，表示从这个元素创建的有限元场的全局枚举，还有一个向量`darcy_velocity`，用于保持这个场的节点值。在求解压力后，我们将使用这三个变量来计算一个后处理的速度场，然后我们可以评估其误差，并可以输出用于可视化。

[1.x.100] 




[1.x.101] [1.x.102] 




接下来，我们定义系数矩阵[2.x.158]（这里是身份矩阵）、迪里希特边界条件、右手边[2.x.159]，以及与这些选择相对应的[2.x.160]和[2.x.161]的精确解，即[2.x.162]。

[1.x.103] 



实现精确压力解决方案的类有一个奇怪之处，即我们将其作为一个有两个分量的矢量值来实现。(我们在构造函数中说它有两个分量，在这里我们调用基函数类的构造函数)。在`value()`函数中，我们没有测试`component`参数的值，这意味着我们为向量值函数的两个分量返回相同的值。我们这样做是因为我们将本程序中使用的有限元描述为一个包含内部和界面压力的矢量值系统，当我们计算误差时，我们将希望使用相同的压力解决方案来测试这两个分量。

[1.x.104] 




[1.x.105] [1.x.106] 。





[1.x.107] [1.x.108]。




在这个构造函数中，我们为矢量值函数创建一个有限元空间，这里将包括用于内部和界面压力的函数， [2.x.163] 和 [2.x.164] 。

[1.x.109] 




[1.x.110] [1.x.111] 。




我们在单位平方域上生成一个网格并对其进行细化。

[1.x.112] 




[1.x.113] [1.x.114] 




在我们创建了上述网格后，我们分配自由度并调整矩阵和向量的大小。这个函数中唯一感兴趣的部分是我们如何插值压力的边界值。由于压力由内部和界面分量组成，我们需要确保我们只插值到矢量值解空间中与界面压力相对应的分量上（因为这些分量是唯一定义在域的边界上的）。我们通过一个只针对界面压力的分量屏蔽对象来做到这一点。

[1.x.115] 



在双线性形式中，在两个相邻单元之间的面上没有积分项，所以我们可以直接使用[2.x.165]来计算稀疏矩阵。

[1.x.116] 




[1.x.117][1.x.118] 。




这个函数更有意思。正如介绍中所详述的，线性系统的装配要求我们评估形状函数的弱梯度，这是Raviart-Thomas空间中的一个元素。因此，我们需要定义一个Raviart-Thomas有限元对象，并有FEValues对象在正交点评估它。然后我们需要计算每个单元[2.x.167]上的矩阵[2.x.166]，为此我们需要在介绍中提到的矩阵[2.x.168]和[2.x.169]。   


有一点可能不是很明显，在之前的所有教程程序中，我们总是用DoFHandler的单元格迭代器来调用[2.x.170]。这样就可以调用诸如[2.x.171]这样的函数，在单元格的正交点上提取有限元函数的值（用DoF值的向量表示）。为了使这种操作发挥作用，我们需要知道哪些向量元素对应于给定单元上的自由度--也就是说，正是DoFHandler类所提供的那种信息和操作。   


我们可以为 "破碎的 "Raviart-Thomas空间创建一个DoFHandler对象（使用FE_DGRT类），但我们在这里真的不想这样做。至少在当前函数中，我们不需要任何与这个破碎空间相关的全局定义的自由度，而只需要引用当前单元上的这种空间的形状函数。因此，我们利用这样一个事实，即人们也可以用单元格迭代器来调用[2.x.172]的Triangulation对象（而不是DoFHandler对象）。在这种情况下，FEValues当然只能为我们提供只引用单元格的信息，而不是这些单元格上列举的自由度。所以我们不能使用[2.x.173]，但我们可以使用[2.x.174]来获得当前单元格上正交点的形状函数值。下面我们要利用的就是这种功能。下面将给我们提供这些关于Raviart-Thomas函数的信息的变量是`fe_values_rt`（和相应的`fe_face_values_rt`）对象。   


鉴于这个介绍，下面的声明应该是很明显的。

[1.x.119] 



接下来，让我们声明介绍中讨论的各种单元格矩阵。

[1.x.120] 



我们需要[2.x.175]来访问形状函数的[2.x.176]和[2.x.177]部分。

[1.x.121] 



这最终让我们在所有单元格上进行循环。在每个单元中，我们将首先计算用于构建局部矩阵的各种单元矩阵--因为它们取决于相关的单元，所以它们需要在每个单元中重新计算。我们还需要Raviart-Thomas空间的形状函数，为此我们需要首先创建一个通往三角化单元的迭代器，我们可以通过从单元指向DoFHandler的赋值来获得。

[1.x.122] 



我们要计算的第一个单元矩阵是Raviart-Thomas空间的质量矩阵。 因此，我们需要循环计算速度FEValues对象的所有正交点。

[1.x.123] 



接下来我们通过使用[2.x.178]对这个矩阵进行求逆，它将被用来计算后面的系数矩阵[2.x.179]。值得回顾的是，在这次调用之后，`cell_matrix_M`实际上包含了[2.x.180]的*逆。

[1.x.124] 



从介绍中，我们知道定义[2.x.182]的方程的右边[2.x.181]是面积分和单元积分的区别。在这里，我们对内部的贡献的负值进行了近似。这个矩阵的每个分量都是多项式空间的一个基函数与拉维-托马斯空间的一个基函数的发散之间的乘积的积分。这些基函数被定义在内部。

[1.x.125] 



接下来，我们用正交法对面的积分进行近似。每个分量都是多项式空间的基函数与拉维亚-托马斯空间的基函数与法向量的点积的积分。所以我们在元素的所有面上循环，得到法向量。

[1.x.126] 



 [2.x.183]是[2.x.184]的转置与质量矩阵的逆之间的矩阵积（该逆存储在[2.x.185]中）。 

[1.x.127] 



最后我们可以计算出局部矩阵 [2.x.186] 。 元素[2.x.187]由[2.x.188]给出。我们在上一步计算了系数[2.x.189]，因此在适当地重新排列循环后得到以下结果。

[1.x.128] 



接下来，我们计算右手边，[2.x.190] 。

[1.x.129] 



最后一步是将局部矩阵的组件分配到系统矩阵中，并将单元格右方的组件转移到系统右方。

[1.x.130] 




[1.x.131][1.x.132] 。




这一步相当琐碎，与之前的许多教程程序相同。

[1.x.133] 




[1.x.134] [1.x.135]。




在这个函数中，从先前计算的压力解中计算出速度场。速度的定义为[2.x.191] ，这需要我们计算许多与系统矩阵的组装相同的项。还有一些矩阵[2.x.192]我们需要组装（见介绍），但它们实际上只是遵循同样的模式。   


在这里计算与我们在`assemble_system()`函数中已经完成的相同的矩阵，当然是在CPU时间上浪费了。同样，我们从那里复制一些代码到这个函数中，这也是一个糟糕的主意。一个更好的实现可能会提供一个函数来封装这些重复的代码。我们也可以考虑使用计算效率和内存效率之间的经典权衡，在装配过程中每个单元只计算一次[2.x.193]矩阵，把它们存储在某个地方，然后在这里重新使用它们。这就是[2.x.194]所做的，例如，`assemble_system()`函数需要一个参数来决定本地矩阵是否被重新计算，类似的方法是 

类似的方法--也许是将局部矩阵存储在其他地方--可以适用于当前的程序）。) 

[1.x.136] 



在介绍中，我们解释了如何计算单元上的数值速度。我们需要每个单元上的压力解值、格拉姆矩阵的系数和[2.x.195]投影的系数。我们已经计算了全局解，所以我们将从全局解中提取单元解。当我们组装压力的系统矩阵时，已经计算了格拉姆矩阵的系数。我们在这里也要这样做。对于投影的系数，我们做矩阵乘法，即用格拉姆矩阵的倒数乘以[2.x.196]的矩阵作为组成部分。然后，我们将所有这些系数相乘，称之为β。数值速度是β和拉维尔特-托马斯空间的基础函数的乘积。

[1.x.137] 



这个[2.x.197]的分量是[2.x.198]的积分。 [2.x.199]是格拉姆矩阵。

[1.x.138] 



为了计算介绍中提到的矩阵[2.x.200]，我们需要评估[2.x.201]，正如介绍中所解释的。

[1.x.139] 



然后，我们还需要再次计算矩阵[2.x.202]，用来评估弱离散梯度。这与组装系统矩阵时使用的代码完全相同，所以我们只需从那里复制它。

[1.x.140] 



最后，我们需要提取对应于当前单元的压力未知数。

[1.x.141] 



我们现在可以计算局部速度未知数（相对于我们将项[2.x.203]投射到的Raviart-Thomas空间而言）。

[1.x.142] 



我们计算达西速度。这与cell_velocity相同，但用于绘制Darcy速度图。

[1.x.143] 




[1.x.144] [1.x.145]。




这一部分是计算压力的[2.x.204]误差。 我们定义了一个向量，用来保存每个单元上的误差的规范。接下来，我们使用[2.x.205]来计算每个单元上[2.x.206]准则的误差。然而，我们实际上只关心解向量的内部分量的误差（我们甚至不能评估正交点的界面压力，因为这些都位于单元格的内部），因此必须使用一个权重函数，确保解变量的界面分量被忽略。这是通过使用ComponentSelectFunction来实现的，其参数表明我们要选择哪个分量（零分量，即内部压力）以及总共有多少分量（两个）。

[1.x.146] 




[1.x.147][1.x.148] 。




在这个函数中，我们评估每个单元上的速度的[2.x.207]误差，以及面的流量的[2.x.208]误差。该函数依赖于之前计算过的`compute_postprocessed_velocity()`函数，该函数根据之前计算过的压力解来计算速度场。   


我们将评估每个单元的速度，并计算数值速度和精确速度之间的差异。

[1.x.149] 



在之前计算了后处理的速度之后，我们在这里只需要提取每个单元和面的相应数值，并与精确数值进行比较。

[1.x.150] 



首先计算后处理的速度场与精确速度场之间的[2.x.209]误差。

[1.x.151] 



为了重建通量，我们需要单元和面的大小。由于通量是按面计算的，我们要在每个单元的所有四个面上进行循环。为了计算面的速度，我们从之前计算的`darcy_velocity`中提取正交点的值。然后，我们计算法线方向的速度平方误差。最后，我们通过对面和单元面积的适当缩放来计算单元上的[2.x.210]通量误差，并将其加入全局误差。

[1.x.152] 



将所有单元和面的误差相加后，我们取平方根，得到[2.x.211]的速度和通量误差。这些我们都输出到屏幕上。

[1.x.153] 




[1.x.154] [1.x.155]。




我们有两组结果要输出：内部解和骨架解。我们使用[2.x.212]来可视化内部结果。骨架结果的图形输出是通过使用DataOutFaces类完成的。   


在这两个输出文件中，内部和面的变量都被存储。对于界面输出，输出文件只是包含了内部压力对面的插值，但是因为没有定义从两个相邻的单元中得到的两个内部压力变量中的哪一个，所以最好在界面输出文件中忽略内部压力。相反，对于单元格内部输出文件，当然不可能显示任何界面压力[2.x.213]，因为这些压力只适用于界面，而不是单元格内部。因此，你会看到它们被显示为一个无效的值（比如一个无穷大）。   


对于细胞内部的输出，我们还想输出速度变量。这有点棘手，因为它生活在同一个网格上，但使用不同的DoFHandler对象（压力变量生活在`dof_handler`对象上，达西速度生活在`dof_handler_dgrt`对象上）。幸运的是，[2.x.214]函数有一些变化，允许指定一个向量所对应的DoFHandler，因此我们可以在同一个文件中把两个DoFHandler对象的数据可视化。

[1.x.156] 



首先将压力解决方案附加到DataOut对象上。

[1.x.157] 



然后对达西速度场做同样的处理，并继续将所有数据写入文件中。

[1.x.158] 




[1.x.159][1.x.160] 。




这是主类的最后一个函数。它调用我们类的其他函数。

[1.x.161] 




[1.x.162] [1.x.163] 这是主函数。




这是主函数。我们可以在这里改变维度以在3D中运行。

[1.x.164] 

[1.x.165][1.x.166]。


我们在运行程序时，右手边将产生解 [2.x.215] ，并且在域 [2.x.216] 中具有同质的迪里希特边界条件。此外，我们选择微分算子[2.x.217]中的系数矩阵作为身份矩阵。我们使用[2.x.218]、[2.x.219]和[2.x.220]元素组合来测试这个设置，人们可以通过使用`main()`中`WGDarcyEquation`对象的适当构造参数来选择。然后我们将可视化单元内部和面上的压力值。随着网格的细化，压力、速度和流量的收敛率对于[2.x.221]应该是1，对于[2.x.222]应该是2，对于[2.x.223]应该是3。


[1.x.167][1.x.168][1.x.169] 


下面的数字显示了使用[2.x.224]元素的内部压力和表面压力。网格分别细化了2倍（顶部）和4倍（底部）。(这个数字可以在`make_grid()`函数中调整)。当网格较粗时，可以看到面压[2.x.225]整齐地位于两个相邻单元的内压[2.x.226]的数值之间。

 [2.x.227]  

从图中我们可以看出，随着网格的细化，最大和最小的压力值正在接近我们预期的数值。由于网格是矩形网格，每个方向上的单元数是偶数，所以我们有对称的解决方案。从右边的三维图中，我们可以看到，在[2.x.228]上，压力在单元的内部是一个常数，正如预期的那样。

[1.x.170][1.x.171][1.x.172] 


我们用不同的细化网格（在`make_grid()`函数中选择）运行代码，得到以下压力、速度和通量的收敛率（如介绍中所定义）。

 [2.x.229]  

我们可以看到[2.x.230]的收敛率在1左右，当然，这与我们的理论预期相符。


[1.x.173][1.x.174][1.x.175] 


我们可以用下一个更高的多项式度数重复上面的实验。下面的数字是使用[2.x.231]实现的内部压力和表面压力。网格被细化了4次。 与之前使用[2.x.232]的数字相比，在每个单元上，解不再是恒定的，因为我们现在使用双线性多项式来做近似。因此，在一个内部有4个压力值，在每个面上有2个压力值。

 [2.x.233]  

与[2.x.234]组合的相应图像相比，现在的解决方案大大增加了准确性，特别是在界面上非常接近于连续，我们不再能够区分界面压力[2.x.235]和相邻单元上的内部压力[2.x.236]。

[1.x.176][1.x.177][1.x.178] 


以下是我们通过使用[2.x.237]元素组合得到的压力、速度和通量的收敛率。

 [2.x.238]  

2.x.239]的收敛率在2左右，符合预期。




[1.x.179][1.x.180][1.x.181] 


让我们再提高一个多项式度数。下面是使用[2.x.240]实现的内部压力和面压，网格大小为[2.x.241]（即5个全局网格细化步骤）。在程序中，我们在生成图形输出时使用`data_out_face.build_patches(fe.degree)`（参见[2.x.242]的文档，这里意味着我们将每个2d单元内部分成4个子单元，以便提供更好的二次多项式的可视化。 [2.x.243]  


[1.x.182][1.x.183][1.x.184] 


和以前一样，我们可以使用[2.x.245]组合生成压力、速度和流量的[2.x.244]误差的收敛数据。

 [2.x.246]  

再一次，[2.x.247]的收敛率符合预期，其值在3左右。[1.x.185] [1.x.186] [2.x.248] 。 

 [2.x.249] 
