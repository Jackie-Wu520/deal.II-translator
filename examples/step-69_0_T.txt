 [2.x.0][2.x.1] 。 

本教程取决于 [2.x.2] , [2.x.3] 。

[1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12][1.x.13][1.x.14][1.x.15][1.x.16 ][1.x.17][1.x.18][1.x.19][1.x.20][1.x.21][1.x.22][1.x.23][1.x.24][1.x.25][1.x.26][1.x.27][1.x.28][1.x.29][1.x.30][1.x.31] 

[1.x.32] 

 [2.x.4] [2.x.5] 桑迪亚国家实验室是一个多任务实验室，由霍尼韦尔国际公司的全资子公司桑迪亚国家技术与工程解决方案有限公司根据DE-NA0003525号合同为美国能源部国家核安全局管理和运营。本文件描述了客观的技术结果和分析。文件中可能表达的任何主观观点或意见，不一定代表美国能源部或美国政府的观点。[2.x.6]  

 [2.x.7] 本教程步骤实现了一个基于一阶精确[1.x.33]的求解欧拉气体动力学方程[2.x.8] 。因此，它主要为教育目的而提出。对于实际的研究计算，你可能要考虑探索相应的[1.x.35]，它使用[1.x.36]技术，以及强保稳（SSP）时间积分，见[2.x.9] （[1.x.37]）。

 [2.x.10]  

[1.x.38][1.x.39][1.x.40] 


本教程提出了一个用于求解可压缩欧拉方程的一阶方案，该方案基于三个要素：在有限元背景下对欧拉方程进行[1.x.41]型离散化；基于局部波速的[1.x.42]上界的图粘性稳定；以及明确的时间步进。因此，本教程步骤中提出的想法和技术与[2.x.11]中使用的想法和技术有很大的不同，后者主要是使用自动微分。从编程的角度来看，本教程将关注在大规模计算中发现的一些技术：混合线程-MPI并行化；自由度的有效局部编号；使用工作线程进行并发的后处理和结果的写出；以及检查点和重启。

应该注意的是，双曲守恒定律背景下的一阶方案需要太多的自由度来解决模拟流体的某些关键特征，因此，通常只能作为高阶方案的基本构建模块 [2.x.12] 。然而，我们希望读者在跳入完整的研究代码（如[2.x.13]中讨论的二阶方案）之前，仍然认为该教程步骤是一个很好的起点（特别是在编程技术方面）。


[1.x.43] [1.x.44][1.x.45] 。


气体动力学的可压缩欧拉方程以保守形式写成如下。

[1.x.46] 

其中[2.x.14] ，和[2.x.15] ，和[2.x.16] 是空间维度。我们说，[2.x.17]是状态，[2.x.18]是系统的通量。在欧拉方程的情况下，状态由[2.x.19]给出：其中[2.x.20]表示密度，[2.x.21]是动量，而[2.x.22]是系统的总能量。系统的通量[2.x.23]被定义为 

[1.x.47] 

其中[2.x.24]是身份矩阵，[2.x.25]表示张量积。在这里，我们介绍了压力[2.x.26]，在一般情况下，它是由一个封闭形式的状态方程定义。在本教程中，我们将讨论限制在多晶体理想气体的范畴内，对于这些气体，压力由以下公式给出 

[1.x.48] 

其中因子[2.x.27]表示[1.x.49]。


[1.x.50][1.x.51] 。


双曲守恒定律，如 

[1.x.52] 

对解决理论构成了重大挑战。一个明显的观察是，以变分形式重写方程并以解本身进行检验并不能导致能量估计，因为配对[2.x.28]（理解为[2.x.29]内积或对偶性配对）不能保证是非负的。在这种情况下，诸如能量稳定性或[2.x.30]稳定性的概念（一般来说）是没有意义的。

历史上，为了加深对双曲守恒定律的理解而采取的最有成效的步骤是假设解被正式定义为[2.x.31]，其中[2.x.32]是抛物线正则化的解 

[1.x.53] 

这样的解，被理解为在零粘度极限下恢复的解，通常被称为[1.x.54]。这是因为在物理上[2.x.33]可以理解为与流体的粘度有关，即表示以不同速度运动的相邻气体粒子对彼此施加的摩擦力大小的一个量）。欧拉方程本身是在无摩擦的假设下得出的，但在物理上可以预期描述摩擦或粘度消失的极限情况。) 这种解决方案的全球存在和唯一性是一个开放的问题。然而，我们至少知道，如果这种粘度解存在，它们必须满足所有[2.x.35]和[2.x.36]的约束条件，其中 

[1.x.55] 

这里，[2.x.37]表示比熵 

[1.x.56] 

我们将把[2.x.38]称为欧拉方程的不变量集。换句话说，一个状态[2.x.39]服从密度的正性、内能的正性和比熵的局部最小原则。这个条件是精确（粘性）解所满足的一类点式稳定性约束的简化版本。我们所说的 "点 "是指该约束必须在域的每一点上得到满足，而不仅仅是在平均（积分或高阶矩）意义上。

在数值逼近的背景下，违反这样的约束有可怕的后果：它几乎肯定会导致数值方案的灾难性失败，失去双曲性，以及总体上失去（离散）问题的良好解决性。这也意味着我们已经计算了一些不能从物理上解释的东西。例如，我们该如何看待一个具有负密度的计算结果？下面我们将制定一个方案，确保[2.x.40]的离散近似值保持在[2.x.41]中。


[1.x.57][1.x.58] 。


在[2.x.42]、[2.x.43]、[2.x.44]和[2.x.45]之后，在这一点上，将欧拉方程的离散化建立在（半离散的）变分公式上看起来很诱人。

[1.x.59] 

这里，[2.x.46]是一个适当的有限元空间，[2.x.47]是一些线性稳定方法（可能辅以一些特殊的冲击捕捉技术，例如，见[2.x.48]的第五章和其中的参考文献）。在deal.II教程中描述的大多数随时间变化的离散化方法都是基于这样一种（半离散的）变量方法。从根本上说，从分析的角度来看，变分离析被认为是提供某种全局（积分）稳定性的概念，也就是说，一个估计的形式为 

[1.x.60] 

为真，其中[2.x.49]可以代表[2.x.50]-norm，或者更广泛地代表一些离散的（可能与网格有关）能量-norm。自80年代中期以来，双曲守恒定律的变异离散化非常流行，特别是与SUPG类型的稳定化和/或上卷技术相结合（见[2.x.51]和[2.x.52]的早期工作）。它们已被证明是在亚音速无冲击制度和类似的良性情况下进行模拟的一些最佳方法。

<! -- 特别是，教程[2.x.53]侧重于使用dG技术研究亚声速体系中气体动力学的欧拉方程。--> 

然而，在跨音速和超音速制度中，以及冲击-流体力学应用中，使用变分方案可能是值得怀疑的。事实上，在写这篇文章的时候，大多数冲击-流体力学代码仍然是以有限体积方法为基础的。变分方案在这种极端状态下失败的主要原因是缺乏点状稳定性。这是因为[1.x.61]对积分量（如矩积分）的约束一般来说对解的点定性没有影响。虽然其中一些问题可以通过对正确的冲击捕捉方案的（永久）追逐而得到缓解，但类似有限差分的方案和有限体积方案在许多方面仍有优势。

因此，在这一教程步骤中，我们偏离了变分方案。我们将提出一个完全代数化的表述（具有拼合型方案的味道），它可以点状保留约束，即。

[1.x.62] 

与有限差分/体积方案相反，本步骤实现的方案最大限度地利用了有限元软件的基础设施，在任何空间维度的任何网格上都能工作，并且理论上保证始终工作，没有例外。这说明deal.II的使用范围远远超出希尔伯特空间中的变分方案，deal.II中的大量类、模块和命名空间都可以用于这种目的。


[1.x.63][1.x.64] 


设[2.x.54]为标量值的有限维空间，由基[2.x.55]横跨，其中。 [2.x.56]和[2.x.57]是识别网格中每个标量自由度（DOF）的所有索引（非负整数）的集合。因此，标量有限元函数[2.x.58]可以写成[2.x.59]与[2.x.60] 。我们引入矢量值近似空间的符号 [2.x.61] 。设 [2.x.62] ，则可以写成 [2.x.63] ，其中 [2.x.64] 和 [2.x.65] 是标量值的形状函数。

 [2.x.66] 我们特意在符号中不使用矢量值有限元空间。矢量值有限元空间对于PDE系统的变分公式（如Navier-Stokes）是很自然的。在这种情况下，必须计算的相互作用描述了[1.x.65]：通过对矢量值DoFHandler的适当重新编号（即用FESystem初始化），有可能相对容易地计算块矩阵（为了推进解决方案而需要）。然而，在时间明确的搭配型方案（如有限差分和/或本教程中提出的方案）的背景下，必须计算的相互作用可以更好地描述为[1.x.66]（不是在DOF之间）。此外，在我们的案例中，我们不解决线性方程以推进解决方案。这使得在理论和/或实践中使用矢量值有限元空间的理由非常少。

我们将使用通常的拉格朗日有限元：让[2.x.67]表示所有支持点的集合（见[2.x.68]"本词汇条"），其中[2.x.69] 。那么每个索引 [2.x.70] 都唯一地标识了一个支持点 [2.x.71] ，以及一个标量值的形状函数 [2.x.72] 。有了这个符号在手，我们可以将（显式时间步进）方案定义为。

[1.x.67] 

其中 

  - [2.x.73]是块状质量矩阵 

  - [2.x.74] 是时间步长 

  - [2.x.75]（注意[2.x.76]）是一个矢量值矩阵，用于在弱意义上近似通量的发散。

  - [2.x.77] 是包含与索引[2.x.78] 耦合的所有自由度的邻接列表。换句话说，[2.x.79]包含行索引i的所有非零列索引。[2.x.80]也将被称为 "模板"。

  - [2.x.81]是针对与支持点[2.x.84]相关的状态[2.x.83]所评估的双曲系统的通量[2.x.82]。

  - 如果[2.x.86]是所谓的[1.x.68]，则为[2.x.85]。图形粘度作为一个稳定项，它在某种程度上是[2.x.87]的离散对应物，出现在上面描述的粘度解决方案的概念中。我们将把[2.x.88]的构造建立在最大局部波速[2.x.89]的估计上，稍后将详细解释。

  - 粘度矩阵的对角线项被定义为 [2.x.90] 。

  - [2.x.91]是[2.x.92]矩阵的归一化，它进入了近似黎曼解算器，我们用它来计算本地波速的近似值[2.x.93]。这将在下文中进一步解释）。

[2.x.94]的定义远非易事，我们将推迟精确的定义，以便首先关注一些算法和实现问题。我们注意到 

  - [2.x.95]和[2.x.96]不会在时间上演化（只要我们保持离散化的固定）。因此，将这些矩阵/向量在所谓的[1.x.69]中组装一次并在每个时间步长中重复使用是有意义的。它们是我们将称之为离线数据的一部分。

  - 在每个时间步骤中，我们必须评估[2.x.97]和[2.x.98]，这将构成大部分的计算成本。

考虑以下伪代码，说明在新的时间[2.x.100]计算解决方案[2.x.99]的可能的直接策略，给定在时间[2.x.102]的已知状态[2.x.101] 。

[1.x.70] 



我们在此注意到，。

- 这种 "装配 "不需要任何形式的正交或单元环。

- 这里[2.x.103]和[2.x.104]是一个全局矩阵和一个全局向量，分别包含所有向量[2.x.105]和所有状态[2.x.106]。

- [2.x.107], [2.x.108], 和[2.x.109]是假设的实现，它们要么收集（来自）全局矩阵和向量，要么写入（进入）全局矩阵和向量。

- 如果我们假设一个二维空间的笛卡尔网格，一阶多项式空间 [2.x.110] ，并且 [2.x.111] 是一个内部节点（即 [2.x.112] 不在域的边界上），那么。 [2.x.113]应该包含九个状态矢量元素（即与形状函数[2.x.114]相关的补丁/宏元素中的所有状态）。这是与通常基于单元的循环的主要区别之一，在这种循环中，收集功能（在deal.II的情况下编码为FEValuesBase<dim, spacedim>.get_function_values()）只收集本地单元的值（只是补丁的一个子集）。

实际执行将在一个关键方面偏离上述代码：时间步长[2.x.115]必须根据CFL条件来选择 

[1.x.71] 

其中[2.x.116]是一个选定的常数。这就要求在实际执行上述更新之前，在一个单独的步骤中计算所有的[2.x.117]。但核心原则没有改变：我们不在单元格上循环，而是在疏散图的所有边上循环。

 [2.x.118]在有限元界之外，在更广泛的CFD界遇到这种全代数方案（即没有双线性形式，没有单元循环，没有正交）并不罕见。这类方案有丰富的应用历史，也称为[1.x.72]或[1.x.73]有限元方案（例如，见[2.x.119]的历史概述）。然而，需要强调的是，该方案的代数结构（在本教程中介绍）和节点循环并不只是一个性能上的噱头。实际上，这个方案的结构是出于理论上的需要：该方案的点稳定性证明取决于该方案的特定代数结构。此外，不可能使用单元环计算代数粘度[2.x.120]，因为它们非线性地依赖于跨越一个以上单元的信息（叠加不成立：将来自不同单元的贡献相加不会导致正确的结果）。

[1.x.74][1.x.75] 。


在本教程步骤中考虑的例子中，我们使用了三种不同类型的边界条件：本质类边界条件（我们在域的左侧边界规定了一个状态），域的右侧边界的流出边界条件（也称为 "无为 "边界条件），以及障碍物的顶部、底部和表面的 "反射 "边界条件[2.x.121]（也称为 "滑移 "边界条件）。我们不会过多地讨论基本的和 "无为 "的边界条件，因为它们的实现相对容易，读者可以直接从（有记录的）源代码中获取实现。在这部分介绍中，我们将只关注 "反映 "的边界条件，这在某种程度上是比较棘手的。

 [2.x.122] 在写这篇文章的时候（2020年初），说双曲守恒定律系统的稳定边界条件的分析和实现都是一个开放的问题也不无道理。对于变分公式的情况，稳定的边界条件是那些导致良好的（胁迫的）双线性形式。但是对于一般的双曲守恒定律系统（以及本教程中所使用的代数式），胁迫性作为稳定性的一个概念没有适用性和/或意义。在本教程的步骤中，我们将使用不变集的保存作为我们主要的稳定性概念，它（至少）保证了离散问题的良好解决。

对于反射边界条件的情况，我们将按如下步骤进行。

- 对于每一个时间步骤，在完全不满足边界条件的情况下前进。

- 让[2.x.123]成为我们想要执行反射边界条件的那部分边界。在时间步骤结束时，我们在一个后处理步骤中强烈地执行反射边界条件，在这个步骤中我们执行[1.x.76]的投影。

  删除了[2.x.124]的法线分量。这是一个有点天真的想法，保留了PDE的一些基本属性，我们在下面解释。

这种方法通常被称为 "边界条件的明确处理"。经验丰富的有限元人员可能会发现这种方法值得怀疑。毫无疑问，在求解抛物线或椭圆方程时，我们通常通过使它们成为近似空间的一部分来强制执行基本的（类似于Dirichlet的）边界条件[2.x.125]，并将自然的（例如Neumann）边界条件作为变量公式的一部分。我们也知道，边界条件的明确处理（在抛物线PDEs的背景下）几乎肯定会导致灾难性的后果。然而，在非线性双曲方程的背景下，我们有。

- 证明（对于反映边界条件的情况）边界条件的显式处理不仅是保守的，而且还能保证对所有[2.x.127]的属性[2.x.126]的保存（良好处理性）是比较容易的。这也许是使用显式执行边界条件的最重要原因。

- 就我们所知：我们不知道有任何数学结果证明，当使用边界条件直接执行到近似空间，或使用Nitsche惩罚方法（例如广泛用于非连续Galerkin方案）的弱执行时，有可能保证所有[2.x.128]的属性。此外，其中一些传统的想法导致了相当严格的时间步长约束。

- 有足够的数值证据表明，在CFL条件下，对Dirichlet-like边界条件的明确处理是稳定的，并且不会带来任何精度上的损失。

如果[2.x.130]表示欧拉方程，在整个边界上反映边界条件（即[2.x.131]），我们在空间和时间上进行积分[2.x.132]，我们会得到 

[1.x.77] 

请注意，动量不是一个守恒量（与墙壁的相互作用导致动量的增加/减少）：然而[2.x.133]必须满足动量平衡。尽管我们不会在整个域中使用反射边界条件，但我们想知道我们对反射边界条件的实现与上述守恒特性是一致的。特别是，如果我们在整个域中使用投影[2.x.134]，可以保证以下离散质量平衡。

[1.x.78] 

其中[2.x.135]是位于边界的节点上的压力。显然，[2.x.136]是[2.x.137]的离散对应物。身份[2.x.138]的证明被省略了，但我们简要地提到，它取决于[2.x.140]中提供的[1.x.79][2.x.139]的定义。我们还注意到，这种反映边界条件的执行与最初在 [2.x.141] 中提出的条件不同。[1.x.80] [1.x.81] 。


[1.x.82] [1.x.83] 。




这套包含文件是相当标准的。最耐人寻味的是，我们将完全依靠deal.II数据结构进行MPI并行化，特别是通过[2.x.142]和[2.x.143]包含的[2.x.144]和[2.x.145] 。我们将使用非分布式的 [2.x.146] ( [2.x.147] ) 来存储 [2.x.148] , [2.x.149] 和 [2.x.150] 矩阵的本地部分，而不是 Trilinos, 或 PETSc 特定的矩阵类。

[1.x.84] 



除了上述deal.II特定的包括，我们还包括四个提升头。前两个是二进制文件，我们将用它来实现检查点和重启机制。

[1.x.85] 



最后两个头文件用于在整数区间内创建自定义迭代器范围。

[1.x.86] 



对于[2.x.151] [2.x.152] [2.x.153] [2.x.154]和[2.x.155]  

[1.x.87] 




[1.x.88] [1.x.89]。




我们开始实际的实现，先声明所有的类及其数据结构和方法。与之前的例子步骤相比，我们使用了更精细的概念、数据结构和参数封装到各个类中。因此，一个单一的类通常围绕着一个单一的数据结构（如[2.x.156]类中的Triangulation），或者一个单一的方法（如[2.x.157]类的[2.x.158]函数）。我们通常声明参数变量和抓取数据对象为 "私有"，并使其他类使用的方法和数据结构为 "公共"。




 [2.x.159] 一个更简洁的方法是通过[1.x.90]来保护对所有数据结构的访问。但为了简洁起见，我们不采用这种方法。




我们还注意到，绝大多数的类都是从ParameterAcceptor派生的。这有利于将所有的全局参数归纳到一个（全局的）ParameterHandler中。关于从ParameterAcceptor继承作为全局订阅机制的更多解释可以在 [2.x.160] 中找到。

[1.x.91] 



我们首先定义一些[2.x.161]常量，在整个教程步骤中使用。这使得我们可以用一个助记符（如[2.x.162]）而不是一个数值来指代边界类型。







[1.x.92] 




[1.x.93] [1.x.94]。   


类[2.x.163]包含所有关于问题的网格（三角形）和离散化（映射、有限元、正交）的数据结构。如前所述，我们使用ParameterAcceptor类来自动填充特定问题的参数，如几何信息（[2.x.164] 等）或来自参数文件的细化水平（[2.x.165] ）。这就要求我们把数据结构的初始化分成两个函数。我们在构造函数中初始化所有不依赖于参数的东西，并将网格的创建推迟到[2.x.166]方法，一旦所有参数通过[2.x.167]读入，就可以调用该方法。 

[1.x.95] 




[1.x.96] [1.x.97]来调用。   


[2.x.168]类包含了离散化中几乎所有不随时间演变的组件，特别是DoFHandler、SparsityPattern、边界图、块状质量矩阵、[2.x.169]和[2.x.170] 矩阵。这里，术语[1.x.98]指的是[2.x.171]的所有类成员都有明确定义的值，与当前时间步长无关。这意味着它们可以提前初始化（在[1.x.99]），并且不意味着在以后的任何时间步长中被修改。例如，稀疏模式不应该随着时间的推进而改变（我们在空间上不做任何形式的适应性）。同样地，包络质量矩阵的条目也不应该随着时间的推进而被修改。   


我们还计算并存储一个[2.x.172]，它包含一个从边界自由度的[2.x.173]类型的全局索引到一个由法向量、边界ID和与自由度相关的位置组成的元组的映射。我们必须在这个类中计算和存储这些几何信息，因为我们在后面的代数循环中无法获得几何（或基于单元）的信息。   




 [2.x.174] 尽管这个类目前没有任何可以从参数文件中读入的参数，但我们还是从ParameterAcceptor派生出来，并遵循与Discretization类相同的习惯，提供一个[2.x.175] )方法。

[1.x.100] 




[1.x.101][1.x.102] 。   


该类的成员函数是欧拉方程特有的实用函数和数据结构。

- 类型别名[2.x.176]用于状态[2.x.177]。 

- 类型别名 [2.x.178] 用于通量 [2.x.179] 。

- [2.x.180] 函数从状态向量 [2.x.182] 中提取 [2.x.181] 并将其存储在 [2.x.183] 中。

- [2.x.184] 函数从给定的状态向量 [2.x.186] 中计算 [2.x.185] 。   


类成员 [2.x.187] , [2.x.188] 的目的从它们的名字就可以看出。我们还提供了一个函数 [2.x.189] ，用于计算上面提到的波速估计， [2.x.190] ，用于计算 [2.x.191] 矩阵。   




 [2.x.192] 宏扩展为一个（编译器特定的）pragma，确保在这个类中定义的相应函数总是内联的，也就是说，在每次调用该函数时，函数体都被放在原位，而不会产生调用（和代码指示）。这比[2.x.194]关键字更强，后者或多或少是对编译器的一个（温和的）建议，即程序员认为内联该函数是有益的。 [2.x.195]只应该在像这样的情况下很少使用，而且要谨慎使用，因为我们实际上知道（由于基准测试）内联有关的函数可以提高性能。   


最后，我们观察到这是本教程步骤中唯一一个与特定的 "物理学 "或 "双曲守恒定律"（在本例中为欧拉方程）相联系的类。所有其他的类主要是 "离散化 "类，与正在解决的特定物理学不相干。

[1.x.103] 




[1.x.104] [1.x.105]。   


类[2.x.196]的唯一公共数据属性是一个[2.x.197][2.x.198]，用于计算给定点和时间的初始状态。这个函数用于填充初始流场，以及在每个时间步骤中明确设置迪里切特边界条件（在流入边界）。   


在这个例子中，我们只是实现了一个均匀的流场，其方向和一维原始状态（密度、速度、压力）从参数文件中读取。   


最好是一次性初始化该类：初始化/设置参数并定义依赖于这些默认参数的类成员。然而，由于我们不知道参数的实际值，这在一般情况下是没有意义和不安全的（我们希望有机制来检查输入参数的一致性）。我们没有定义另一个[2.x.199]方法在调用[2.x.200]后被调用（手动），而是为类成员[2.x.201]提供了一个 "实现"，当调用[2.x.202]时，每个继承自ParameterAceptor的类都会自动调用。

[1.x.106] 



我们声明一个私有的回调函数，它将被连接到[2.x.203]信号上。

[1.x.107] 




[1.x.108] [1.x.109]    


有了[2.x.204]类在手，我们现在可以实现上面讨论中介绍的显式时间步进方案。[2.x.205]类的主要方法是<code>make_one_step(vector_type &U, double t)</code>，它接受对状态向量[2.x.206]的引用（作为输入参数）计算更新的解决方案，将其存储在向量[2.x.207]中，并返回选择的[2.x.208]大小[2.x.209] 。   


另一个重要的方法是[2.x.210]，主要是为临时向量[2.x.211]分别设置适当的分区和稀疏模式。

[1.x.110] 




[1.x.111] [1.x.112]。   


在其核心部分，Schlieren类实现了类成员 [2.x.212] 。这个类成员的主要目的是计算一个辅助的有限元场[2.x.213]，它在每个节点上由[1.x.113]定义，[2.x.214]原则上可以是任何标量。但在实践中，密度是一个自然的候选量，即[2.x.215] 。[1.x.114]后处理是一种标准的方法，用于增强可视化的对比度，其灵感来自实际的实验X射线和可视化的阴影技术。见[2.x.216]另一个例子，我们创建了一个Schlieren图）。

[1.x.115] 




[1.x.116] [1.x.117]。   


现在，剩下的就是将[2.x.217]和[2.x.218]类中实现的方法连锁起来。我们在一个单独的类[2.x.219]中完成这个工作，该类包含每个类的一个对象，并在ParameterAcceptor类的帮助下再次读入一些参数。

[1.x.118] 




[1.x.119] [1.x.120] 





[1.x.121][1.x.122] 。




手头的第一个主要任务是典型的网格生成、数据结构的设置和组装三合一。在这个例子的步骤中，一个值得注意的创新是使用ParameterAcceptor类，我们用它来填充参数值：我们首先初始化ParameterAcceptor类，用一个表示参数文件中正确分段的字符串[2.x.220]来调用它的构造函数。然后，在构造函数中，每个参数值都被初始化为一个合理的默认值，并通过调用[2.x.221]在ParameterAcceptor类中注册。 

[1.x.123] 



请注意，在前面的构造函数中，我们只把MPI通信器传给了[2.x.222]，但我们仍然没有初始化底层的几何体/网格。如前所述，我们必须将这项任务推迟到[2.x.223]函数，该函数在[2.x.224]函数用从参数文件中读取的最终值填充所有参数变量后被调用。   


[2.x.225]函数是最后一个必须实现的类成员。它创建了实际的三角结构，这是一个基准配置，由一个带有盘状障碍物的通道组成，见 [2.x.226] 。我们通过修改[2.x.227]生成的网格来构建几何体。我们参考[2.x.228]、[2.x.229]和[2.x.230]来了解如何创建高级网格。我们首先创建4个临时的（非分布式的）粗略三角形，用[2.x.231]函数将其缝合起来。我们以[2.x.232]为圆心，直径为[2.x.233] 。通道的左下角有坐标( [2.x.234] ) ，右上角有( [2.x.235] , [2.x.236] ) 。

[1.x.124] 



我们必须将目前位于[2.x.237] [2.x.238]的左边缘固定下来，并将其移到[2.x.239] [2.x.240]。作为最后一步，边界必须被着色，右边是[2.x.241]，[2.x.242]在上下外边界，障碍物。







[1.x.125] 




[1.x.126] [1.x.127]。




在[2.x.243]的构造函数中，除了在初始化列表中初始化相应的类成员外，没有做太多的工作。

[1.x.128] 



现在我们可以初始化DoFHandler，为本地拥有的和本地相关的DOF提取IndexSet对象，并初始化一个[2.x.244]对象，这是分布式向量需要的。

[1.x.129] 




[1.x.130] [1.x.131]。




我们现在可以为我们的矩阵创建稀疏模式了。有相当多的特殊性需要详细解释。我们避免使用分布式矩阵类（例如由Trilinos或PETSc提供的），而是依靠deal.II自己的SparseMatrix对象来存储所有矩阵的局部部分。这一设计决定的动机是：(a)我们实际上从未进行过矩阵-向量乘法，(b)我们总是可以在一个给定的MPI等级上专门组装矩阵的局部部分。相反，我们将计算非线性更新，同时迭代连通性模版的（局部）部分；这是deal.II自己的SparsityPattern专门优化的任务。     


不过，这种设计考虑有一个注意事项。让deal.II SparseMatrix类变得快速的是SparsityPattern中使用的[1.x.132]（见[2.x.245]）。不幸的是，这与全局分布式索引范围不相称，因为具有CSR的稀疏模式不能在索引范围内包含 "洞"。deal.II提供的分布式矩阵通过将全局索引范围转化为连续的局部索引范围来避免这一点。但这恰恰是我们在网板迭代中想要避免的索引操作类型，因为它产生了可衡量的开销。     


[2.x.246]类已经实现了从全局索引范围到连续的局部（每个MPI等级）索引范围的转换：我们不必重新发明车轮。我们只需要使用这种转换能力（一次，而且只有一次），以便为连续的索引范围创建一个 "本地 "稀疏模式 [2.x.247] [2.x.248] [2.x.249] 。这种能力可以通过[2.x.250]函数来调用。一旦使用本地索引创建了稀疏模式，剩下要做的就是确保（在实现我们的散布和聚集辅助函数时）我们总是通过调用[2.x.251]来访问分布式向量的元素，这样我们就完全避免了索引转换，并完全使用本地索引进行操作。







[1.x.133] 



我们必须手工创建 "本地 "稀疏模式。因此，我们在所有本地拥有的和重影的单元上进行循环（见[2.x.252]），提取与单元DOF相关的（全局）[2.x.253]，并使用[2.x.254]对其重新编号。       




 [2.x.255] 在本地拥有的DOF的情况下，这种重新编号包括应用一个移位（即我们减去一个偏移量），这样，现在它们将成为整数区间[2.x.256] [2.x.257] [2.x.258] 中的一个数字。然而，在重影DOF的情况下（即不是本地拥有的），情况是完全不同的，因为与重影DOF相关的全局指数（一般来说）不会是一个连续的整数集。







[1.x.134] 



DoFHandler和SparseMatrix对象的设置到此结束。接下来，我们要组装各种矩阵。我们在一个匿名命名空间中定义了一些辅助函数和数据结构。







[1.x.135] 



 [2.x.259]类，将用于使用WorkStream组装离线数据矩阵。它作为一个容器：它只是一个结构，WorkStream在其中存储本地单元的贡献。请注意，它还包含一个类成员[2.x.260]，用于存储计算边界法线所需的局部贡献。







[1.x.136] 



接下来我们介绍一些辅助函数，它们都与读写矩阵和向量条目有关。它们的动机主要是提供稍微有效的代码和[1.x.137]否则有些乏味的代码。




我们引入的第一个函数[2.x.261]，将用于读取SparsityPattern迭代器[2.x.262]所指向的条目上存储的值。该函数绕过了SparseMatrix接口中的一个小缺陷。SparsityPattern关注的是以CRS格式存储的稀疏矩阵的所有索引操作。因此，迭代器已经知道存储在SparseMatrix对象中的低级向量中相应矩阵条目的全局索引。由于SparseMatrix中缺乏直接用SparsityPattern迭代器访问该元素的接口，不幸的是我们必须创建一个临时的SparseMatrix迭代器。我们只是将其隐藏在[2.x.263]函数中。







[1.x.138] 



[2.x.264]助手是[2.x.265]的逆向操作：给定一个迭代器和一个值，它在矩阵中设置迭代器所指向的条目。







[1.x.139] 



 [2.x.266] : 我们注意到 [2.x.267] 。如果[2.x.268]，那么[2.x.269] 。这基本上意味着我们在每个空间维度需要一个矩阵来存储[2.x.270]的向量。对于矩阵[2.x.271]也有类似的观察。[2.x.272]的目的是检索这些条目并将其存储到[2.x.273]中，以方便我们使用。







[1.x.140] 



 [2.x.274]（第一个接口）：这第一个函数签名，有三个输入参数，将被用来检索矩阵的各个组成部分[2.x.275]。[2.x.276]和[2.x.277]的功能非常相同，但它们的背景不同：函数[2.x.278]不依赖于迭代器（实际上知道指向的值），而是依赖于条目的索引[2.x.279]，以便检索其实际值。我们应该期望[2.x.280]比[2.x.281]稍微贵一些。[2.x.282]的使用将限于计算代数粘度[2.x.283]的任务，即当[2.x.284]和[2.x.285]都位于边界的特殊情况下。     




 [2.x.286] 读者应该知道，访问一个矩阵的任意[2.x.287]条目（例如Trilinos或PETSc矩阵）一般来说是昂贵得不可接受的。这里是我们可能想要关注复杂度的地方：我们希望这个操作有恒定的复杂度，这就是目前使用deal.II矩阵的实现的情况。







[1.x.141] 



 [2.x.288]（第二个接口）：这个有两个输入参数的第二个函数签名将被用来收集节点[2.x.289]的状态，并作为[2.x.290]返回，以方便我们使用。







[1.x.142] 



 [2.x.291] : 这个函数有三个输入参数，第一个是指一个 "全局对象"（比如一个本地拥有的或本地相关的向量），第二个参数可以是一个[2.x.292] ，最后一个参数代表全局对象的索引。这个函数主要用于将更新的节点值（存储为[2.x.293]）写入全局对象中。







[1.x.143] 



我们现在可以将存储在[2.x.294]中的所有矩阵集合起来：块状质量条目 [2.x.295]，矢量值矩阵 [2.x.296] 和 [2.x.297] ，以及边界法线 [2.x.298] 。   


为了利用线程并行化，我们使用了[2.x.299]"多处理器的并行计算 "中详述的WorkStream方法来访问共享内存。按照惯例，这需要定义 

- 抓取数据（即进行计算所需的输入信息）：在这种情况下，它是 [2.x.300] 。

- 工作者：在我们的例子中，这是[2.x.301]函数，它实际上是从Scratch数据中计算出本地（即当前单元）的贡献。

- 拷贝数据：一个包含所有本地装配贡献的结构，在这里是 [2.x.302] 。

- 拷贝数据例程：在这种情况下，它是[2.x.303]，负责将这些本地贡献实际拷贝到全局对象（矩阵和/或矢量）中。   


下面的大部分行是用来定义工作器 [2.x.304] 和复制数据例程 [2.x.305] 的。关于WorkStream框架没有太多可说的，因为绝大多数想法在[2.x.306]、[2.x.307]和[2.x.308]等处都有合理的记录。   


最后，假设[2.x.309]是边界上的一个支持点，（节点）法线被定义为。   




[1.x.144] 

   


我们将首先计算这个表达式的分子，并将其存储在 [2.x.310] 中。我们将在后置循环中对这些向量进行归一化。







[1.x.145] 



下面是对WorkStream所需的抓取数据的初始化 







[1.x.146] 



我们以通常的方式计算凑合质量矩阵项[2.x.311]和和向量[2.x.312]的局部贡献。

[1.x.147] 



现在我们必须计算边界法线。请注意，除非元素在域的边界上有面，否则下面的循环没有什么作用。

[1.x.148] 



请注意，"法线 "将只代表来自形状函数phi_j的支持中的一个面的贡献。所以我们不能在这里对这个局部贡献进行归一化处理，我们必须 "原封不动 "地接受它，存储它并将它传递给复制数据例程。正确的归一化需要在节点上增加一个循环。这在下面的复制函数中完成。

[1.x.149] 



最后，我们按照WorkStream的要求提供了一个copy_local_to_global函数 

[1.x.150] 



在这个时候，我们已经完成了 [2.x.313] 和 [2.x.314] 的计算，但到目前为止，矩阵 [2.x.315] 只包含矩阵 [2.x.316] 的一个副本。这不是我们真正想要的：我们必须对其条目进行标准化。此外，我们还没有填充矩阵[2.x.317]的条目，存储在地图[2.x.318]中的向量也没有被规范化。     


原则上，这只是离线数据，过度优化它们的计算并没有什么意义，因为它们的成本会在我们将要使用的许多时间步骤中得到摊销。然而，计算/存储矩阵[2.x.319]的条目非常适合说明线程并行的节点循环。

- 我们要访问网格/稀疏图中的每个节点[2.x.320]。

- 对于每一个这样的节点，我们要访问每一个[2.x.321]，以便[2.x.322] 。     


从代数的角度来看，这相当于：访问矩阵中的每一行，并对这些行中的每一行在列上执行循环。节点循环是本教程步骤的一个核心主题（见介绍中的伪代码），会反复出现。这就是为什么现在是介绍它们的正确时机。     


我们有线程并行化能力[2.x.323]，在某种程度上比WorkStream框架更通用。特别是，[2.x.324]可以被用于我们的节点循环。这个功能需要四个输入参数，我们会详细解释（针对我们线程并行节点循环的具体情况）。

- 迭代器[2.x.325]指向一个行索引。

- 迭代器[2.x.326]指向一个数字较高的行索引。

- 函数[2.x.327]和[2.x.328]在前面两个子弹中定义的结束和开始迭代器所跨越的范围内定义了一个子范围）对这个子范围内的每个迭代器应用一个操作。我们不妨称[2.x.329]为 "工作者"。

- Grainsize：每个线程处理的最小迭代器（在本例中代表行）的数量。我们决定最小为4096行。     


这里的一个小注意事项是，提供给[2.x.332]的迭代器[2.x.330]和[2.x.331]必须是随机访问迭代器：在内部，[2.x.333]将把[2.x.334]和[2.x.335]迭代器定义的范围分成子范围（我们希望能够以恒定的复杂性读取这些子范围的任何条目）。为了提供这样的迭代器，我们求助于[2.x.336]。      


下面这段代码的大部分内容是用来定义 "工作者"[2.x.337]：即在子范围的每一行应用的操作。给定一个固定的[2.x.338]，我们要访问该行的每一列/条目。为了执行这样的列-循环，我们使用标准库中的[1.x.151]，其中。

- [2.x.339]给我们一个迭代器，从该行的第一列开始。

- [2.x.340]是一个指向该行最后一列的迭代器。

- [2.x.341]所要求的最后一个参数是应用于该行的每个非零条目（本例中为λ表达式）的操作。     


我们注意到，[2.x.342]将对不相交的行集（子行）进行操作，我们的目标是写进这些行。由于我们要进行的操作的简单性质（法线的计算和存储，以及条目[2.x.343]的规范化），线程在试图写同一个条目时不会发生冲突（我们不需要调度器）。

[1.x.152] 



第一个列循环：我们计算并存储矩阵norm_matrix的条目，并将归一化的条目写入矩阵nij_matrix中。

[1.x.153] 



最后，我们对存储在 [2.x.344] 的向量进行归一化。这个操作没有被线程并行化，因为它既不能说明任何重要的概念，也不能带来任何明显的速度提升。

[1.x.154] 



在这一点上，我们已经完成了与离线数据有关的任何工作。





[1.x.155][1.x.156] 




在这一节中，我们描述了[2.x.345]类的成员的实现。这里的大部分代码是专门针对具有理想气体定律的可压缩欧拉方程的。如果我们想把[2.x.346]重新用于不同的守恒定律（例如：浅水方程），那么这个类的大部分实现就必须改变。但是其他大部分的类（尤其是那些定义循环结构的类）将保持不变。   


我们首先实现一些小的成员函数来计算[2.x.347]、[2.x.348]和系统的通量[2.x.349]。这些函数中的每一个的功能从它们的名字中都是不言自明的。







[1.x.157] 



现在我们讨论 [2.x.350] 的计算。黎曼问题的最大波速的尖锐上界的分析和推导是一个非常技术性的工作，我们不能在本教程中包括对它的高级讨论。在这部分文档中，我们将仅限于简述我们实现函数的主要功能，并指出具体的学术参考文献，以帮助（感兴趣的）读者追踪这些想法的来源（和适当的数学理由）。   


一般来说，获得最大波速的尖锐保证上界需要解决一个相当昂贵的标量非线性问题。这通常是用一个迭代求解器来完成的。为了简化本例中的表述，我们决定不包括这样的迭代方案。相反，我们将只是使用一个初始猜测作为最大波速的上限猜测。更确切地说，[2.x.351]的方程（2.11）（3.7）、（3.8）和（4.3）足以定义一个有保证的最大波速的上限。这个估计值通过调用函数 [2.x.352] 返回。在其核心部分，这种上界的构造使用了所谓的中间压力的二重化近似 [2.x.353] ，例如，见公式（4.46），在 [2.x.354] 第128页。   


由[2.x.355]返回的估计值保证是一个上界，它在一般情况下是相当尖锐的，而且总体上对我们的目的来说是足够的。然而，对于一些特定的情况（特别是当其中一个状态接近真空条件时），这样的估计将是过于悲观的。这就是为什么我们使用第二个估计来避免这种退化，它将通过调用函数 [2.x.356] 来调用。这里最重要的函数是 [2.x.357] ，它取的是 [2.x.358] 和 [2.x.359] 所返回的估计值之间的最小值。   


我们再次开始定义几个辅助函数。   


第一个函数接收一个状态[2.x.360]和一个单位向量[2.x.361]，并在单位向量的方向上计算[1.x.158]一维状态。

[1.x.159] 



为此，我们必须将动量改为[2.x.362]，并且必须从总能量中减去垂直部分的动能。

[1.x.160] 



我们以[1.x.161]的变量代替守恒量返回一维状态。返回数组包括密度 [2.x.363] 、速度 [2.x.364] 、压力 [2.x.365] 和局部声速 [2.x.366] 。







[1.x.162] 



在这一点上，我们还定义了两个小函数，返回一个双数的正负部分。







[1.x.163] 



接下来，我们需要两个局部文数，它们是以原始状态[2.x.367]和给定压力[2.x.368] [2.x.369]公式（3.7）定义的。

[1.x.164] 

这里，[2.x.370]表示给定参数的正部分。







[1.x.165] 



依次为[2.x.371] 公式（3.8）。

[1.x.166] 









[1.x.167] 



剩下的就是计算从左和右原始状态计算出的[2.x.372]和[2.x.373]的最大值（[2.x.374] 公式（2.11）），其中[2.x.375] 由[2.x.376] 公式（4.3）给出。







[1.x.168] 



我们计算出最大波速的第二个上界，在一般情况下，它不像二重化估计那样尖锐。但在近真空条件下，当二赖子近似值可能达到极端值时，它将拯救一切。

[1.x.169] 



 [2.x.377] 常数5.0乘以声速的最大值是[1.x.170]一个临时的常数，[1.x.171]一个调整参数。它为任何 [2.x.378] 定义了一个上限。请不要玩弄它! 







[1.x.172] 



下面是我们要调用的主要函数，以计算 [2.x.379] 。我们简单地计算两个最大的波速估计值并返回最小值。







[1.x.173] 



我们通过定义静态数组[2.x.380]来结束本节，这些数组包含描述我们的状态向量的组件名称的字符串。我们对维度一、二和三进行了模板特化，这在后面的DataOut中用于命名相应的组件。







[1.x.174] 




[1.x.175] [1.x.176]。




在我们讨论正向欧拉方案的实现之前，最后一个准备步骤是简单地实现`InitialValues'类。   


在构造函数中，我们用默认值初始化所有参数，为`ParameterAcceptor`类声明所有参数，并将[2.x.381]槽连接到相应的信号。   


[2.x.382]槽将在调用[2.x.383]后从ParameterAceptor中调用。 在这方面，它的使用适合于必须对参数进行后处理（在某种意义上）或必须检查参数之间的某些一致性条件的情况。







[1.x.177] 



到目前为止，[2.x.384]的构造函数已经为两个私有成员[2.x.385]定义了默认值，并将其添加到参数列表中。但是我们还没有定义唯一一个我们真正关心的公共成员的实现，也就是[2.x.386]（我们将调用这个函数来实际评估网格节点的初始解）。在该函数的顶部，我们必须确保提供的初始方向不是零矢量。   




 [2.x.387] 正如所评论的，我们可以避免使用方法 [2.x.388] 并定义一个类成员 [2.x.389] 以定义 [2.x.390] 的实现。但为了说明问题，我们想在这里记录一种不同的方式，并使用ParameterAcceptor的回调信号。







[1.x.178] 



接下来，我们用一个计算均匀流场的lambda函数来实现[2.x.391]函数对象。为此，我们必须将给定的原始1d状态（密度[2.x.392]、速度[2.x.393]和压力[2.x.394]）转换为保守的n维状态（密度[2.x.395]、动量[2.x.396]和总能量[2.x.397]）。







[1.x.179] 




[1.x.180][1.x.181] 。




[2.x.398]类的构造函数不包含任何令人惊讶的代码。







[1.x.182] 



在类成员 [2.x.399] 中，我们初始化临时向量 [2.x.400] 。向量[2.x.401]将用于在其内容与旧向量交换之前暂时存储解决方案的更新。







[1.x.183] 



现在是实现正向欧拉步骤的时候了。给出时间[2.x.403]的旧状态[2.x.402]的（可写引用），我们就地更新状态[2.x.404]并返回选择的时间步长。我们首先声明一些对各种不同变量和数据结构的只读引用。我们这样做主要是为了有更短的变量名称（例如，[2.x.405]而不是[2.x.406]）。







[1.x.184] 



[1.x.185]: 计算[2.x.407]图的粘性矩阵。     


需要强调的是，粘度矩阵必须是对称的，即[2.x.408] 。在这方面，我们在此注意到，[2.x.409]（或等同于[2.x.410]）提供[2.x.411]或[2.x.412]是一个位于远离边界的支持点。在这种情况下，我们可以通过构造检查出[2.x.413]，这保证了属性[2.x.414] 。     


然而，如果两个支持点[2.x.415]或[2.x.416]刚好都位于边界上，那么，等式[2.x.417]和[2.x.418]就不一定成立。对于这个难题，唯一在数学上安全的解决方案是同时计算[2.x.419]和[2.x.420]并取其最大值。     


总的来说，[2.x.421]的计算是相当昂贵的。为了节省一些计算时间，我们利用了粘度矩阵必须是对称的这一事实（如上所述）：我们只计算[2.x.422]的上三角条目，并将相应的条目复制到下三角的对应项。     


我们再次使用[2.x.423]来实现线程并行的for loops。我们在讨论矩阵的组装[2.x.424]和上面[2.x.425]的归一化时介绍的几乎所有平行遍历的想法在这里再次使用。     


我们再次定义一个 "工作者 "函数[2.x.426]，计算列索引的子范围[i1, i2]的粘度[2.x.427]。

[1.x.186] 



对于一个给定的列索引i，我们遍历从[2.x.428]到[2.x.429]的稀疏模式的列。

[1.x.187] 



我们只计算[2.x.430]，如果[2.x.431]（上三角条目），随后将数值复制到[2.x.432] 。

[1.x.188] 



如果两个支持点刚好都在边界上，我们也要计算 [2.x.433] ，然后取 [2.x.434] 。在这之后，我们可以最终设定上三角和下三角的条目。

[1.x.189] 



[1.x.190]: 计算对角线项 [2.x.435] 和 [2.x.436] 。




到目前为止，我们已经计算了矩阵[2.x.437]的所有非对角线项。我们仍然需要填补其定义为[2.x.438]的对角线项。我们再次使用[2.x.439]来实现这一目的。在计算[2.x.440]s的同时，我们也确定了最大的可接受的时间步长，定义为[1.x.191] 注意，[2.x.441]的操作本质上是全局的，它在所有节点上操作：首先我们必须在所有线程（特定节点的）上取最小值，然后我们必须在所有MPI进程上取最小值。在目前的实现中。

- 我们将[2.x.442]（每个节点）存储为[1.x.192]。2.x.443]的内部实现将负责保护任何可能的竞赛条件，当一个以上的线程试图在同一时间读取和/或写入[2.x.444]。

- 为了获取所有MPI进程的最小值，我们使用实用函数 [2.x.445] 。







[1.x.193] 



on_subranges()将在每个线程上单独执行。因此，变量 [2.x.446] 被存储在线程本地。







[1.x.194] 



我们将d_ij项的负数之和存储在对角线的位置。

[1.x.195] 



并计算最大的本地时间步长 [2.x.447] 。

[1.x.196] 



 [2.x.448]包含为（线程局部）子范围计算的最大可能的时间步长。在这一点上，我们必须在所有线程上同步该值。这就是我们使用的[1.x.197] [1.x.198]更新机制。

[1.x.199] 



在所有线程结束后，我们可以简单地在所有MPI进程中同步该值。







[1.x.200] 



这是一个验证计算出的[2.x.449]确实是一个有效的浮点数的好时机。

[1.x.201] 



[1.x.202]: 执行更新。




在这一点上，我们已经计算了所有的粘性系数[2.x.450]，我们知道了最大的可接受的时间步长[2.x.451] 。这意味着我们现在可以计算更新。     


[1.x.203]      


这个更新公式与介绍中讨论的略有不同（在伪代码中）。然而，可以证明这两个公式在代数上是等价的（它们将产生相同的数值）。我们更倾向于这第二个公式，因为它具有自然的取消属性，可能有助于避免数字伪数的出现。







[1.x.204] 



[1.x.205]: 修复边界状态。




作为Forward Euler方法的最后一步，我们必须修复所有的边界状态。正如在介绍中所讨论的，我们 

- 在完全不满足边界条件的情况下进行时间推进。

- 在时间步骤结束时，在后处理步骤中强烈地执行边界条件。     


在这里，我们计算修正[1.x.206]，去除[2.x.452]的法线成分。







[1.x.207] 



我们只对本地拥有的子集进行迭代。

[1.x.208] 



在自由滑移的边界上，我们去除动量的法向分量。

[1.x.209] 



在Dirichlet边界上，我们强行执行初始条件。

[1.x.210] 



[1.x.211]: 我们现在更新所有MPI行列的鬼魂层，将临时向量与解决方案向量交换 [2.x.453] （将通过引用返回），并返回所选择的时间步长 [2.x.454] 。







[1.x.212] 




[1.x.213] [1.x.214] 。   


在不同的时间间隔，我们将输出解决方案的当前状态[2.x.455]以及所谓的Schlieren图。[2.x.456]类的构造函数同样不包含任何惊喜。我们只是提供默认值并注册两个参数。

- schlieren_beta：是一个临时的正向放大系数，以增强可视化中的对比度。它的实际值是一个品味问题。

- schlieren_index：是一个整数，表示我们将使用状态[2.x.457]的哪个分量来生成可视化。







[1.x.215] 



同样，[2.x.458]函数初始化了两个临时向量（[2.x.459] ）。







[1.x.216] 



我们现在讨论类成员[2.x.460]的实现，它基本上是取状态向量[2.x.461]的一个分量并计算该分量的Schlieren指标（Schlieren指标的公式可以在类的声明[2.x.462]之前找到）。我们首先注意到这个公式需要 "结点梯度" [2.x.463] 。然而，对于[2.x.464]有限元函数来说，梯度的节点值没有定义。更一般地说，梯度的点值对[2.x.465]函数来说没有定义。我们可以使用最简单的技术来恢复节点的梯度，即加权平均法。   


[1.x.217]    


其中[2.x.466]是形状函数[2.x.467]的支持，[2.x.468]是权重。权重可以是任何正函数，如[2.x.469]（这将允许我们恢复通常的均值概念）。但是像往常一样，我们的目标是尽可能多地重复使用离线数据。在这个意义上，最自然的权重选择是[2.x.470] 。将这种权重的选择和扩展[2.x.471]插入[2.x.472]中，我们得到:    


[1.x.218]    


使用这最后一个公式，我们可以恢复平均节点梯度，而不需要求助于任何形式的正交。这个想法与基于边缘的方案（或代数方案）的整体精神非常一致，我们希望尽可能直接地对矩阵和向量进行操作，以避免通过各种方式组装双线性形式、单元环、正交，或在输入参数（上一时间步的状态）和计算更新所需的实际矩阵和向量之间的任何其他中间结构/操作。   


第二件要注意的事情是，我们必须计算全局最小和最大 [2.x.473] 和 [2.x.474] 。按照在类成员[2.x.475]中用于计算时间步长的相同思路，我们将[2.x.476]和[2.x.477]定义为原子倍数，以便解决线程之间的任何冲突。像往常一样，我们使用[2.x.478]和[2.x.479]来寻找所有MPI进程中的全局最大/最小值。   


最后，不可能在所有节点上进行一次循环来计算Schlieren指标。整个操作需要在节点上进行两次循环。

   




- 第一个循环计算网格中所有[2.x.481]的[2.x.480]，以及边界[2.x.482]和[2.x.483] 。

- 第二个循环最后使用公式计算Schlieren指标    


[1.x.219]    


这意味着我们将不得不为每一个阶段定义两个工作者[2.x.484]。







[1.x.220] 



我们将当前MPI进程中的r_i_max和r_i_min定义为原子倍数，以避免线程之间的竞赛条件。

[1.x.221] 



第一个循环：计算每个节点的平均梯度以及梯度的全局最大值和最小值。

[1.x.222] 



我们在自由滑移边界固定梯度r_i，类似于我们在正向欧拉步骤中固定边界状态的方式。这可以避免在自由滑移边界的Schlieren图中出现尖锐的、人为的梯度，这纯粹是一种外观上的选择。







[1.x.223] 



我们提醒读者，我们对结点梯度本身不感兴趣。我们只想得到它们的规范，以便计算Schlieren指标（用块状质量矩阵加权[2.x.485]）。

[1.x.224] 



我们将当前_r_i_max和current_r_i_min（在当前子范围内）与r_i_max和r_i_min（对于当前MPI进程）进行比较，并在必要时更新它们。







[1.x.225] 



并在所有MPI进程中同步[2.x.486]。







[1.x.226] 



第二个循环：我们现在有向量[2.x.487]和标量[2.x.488]可供我们使用。这样我们就可以实际计算Schlieren指标了。







[1.x.227] 



最后，交换幽灵元素。

[1.x.228] 




[1.x.229] [1.x.230]。   


在实现了所有的类之后，是时候创建一个[2.x.489]、[2.x.490]和[2.x.491]的实例，并在一个循环中运行前向欧拉步骤。   


在[2.x.492]的构造函数中，我们现在初始化所有类的实例，并声明一些控制输出的参数。最值得注意的是，我们声明了一个布尔参数[2.x.493]，它将控制程序是否试图从中断的计算中重新启动。







[1.x.231] 



我们首先在匿名命名空间中实现了一个辅助函数[2.x.494]，用于在终端输出带有一些漂亮格式的信息。







[1.x.232] 



有了[2.x.495]，现在是实现[2.x.496]的时候了，它包含了我们程序的主循环。







[1.x.233] 



我们首先读入参数并初始化所有对象。我们在这里注意到，对[2.x.497]的调用是从参数文件（其名称作为一个字符串参数给出）中读入所有参数。ParameterAcceptor处理一个全局的ParameterHandler，它被初始化为所有从ParameterAceptor派生的类实例的分节和参数声明。对初始化的调用进入了每个每个派生类的分节，并设置所有使用[2.x.498]添加的变量。 







[1.x.234] 



接下来我们创建三角形，集合所有的矩阵，设置从头空间，并初始化DataOut<dim>对象。







[1.x.235] 



我们将在变量 [2.x.499] 中存储当前的时间和状态。







[1.x.236] 




[1.x.237] [1.x.238]。     


默认情况下，布尔值[2.x.500]被设置为false，也就是说，下面的代码段不会被运行。然而，如果[2.x.501]我们表示我们确实有一个中断的计算，程序将通过从检查点文件中读入由[2.x.502], [2.x.503]组成的旧状态来重新启动。这些检查点文件将在下面讨论的[2.x.504]程序中创建。







[1.x.239] 



我们使用一个[2.x.505]来存储和读取检查点状态的内容。







[1.x.240] 



 [2.x.506] 遍历状态向量的所有分量 [2.x.507] 。我们依次读入组件的每一个条目，之后更新ghost层。

[1.x.241] 



随着初始状态的建立，或中断状态的恢复，是时候进入主循环了。







[1.x.242] 



我们首先打印一个信息性的状态信息 







[1.x.243] 



然后执行一个单一的正向欧拉步骤。注意，状态向量[2.x.508]被更新到位，[2.x.509]返回所选择的步长。







[1.x.244] 



后期处理、生成输出和写出当前状态是一项CPU和IO密集型的任务，我们不能在每个时间步长上都做--特别是在显式时间步长上。因此，我们只在超过[2.x.511]设定的阈值时通过调用[2.x.510]函数来安排输出。







[1.x.245] 



我们等待任何剩余的后台输出线程完成，然后打印一个摘要并退出。

[1.x.246] 



[2.x.512] 将初始时间 "t "作为输入参数，并在[2.x.514]对象的帮助下填充一个状态向量[2.x.513]。







[1.x.247] 



2.x.515]的函数签名对于[2.x.516]来说不太合适。我们通过以下方式来解决这个问题：首先，创建一个lambda函数，对于给定的位置[2.x.517]只返回[2.x.518]第1个分量的值。在ScalarFunctionFromFunctionObject包装器的帮助下，这个lambda又被转换为一个[2.x.519]。







[1.x.248] 




[1.x.249] [1.x.250]    


写出最终的vtk文件是一个相当密集的IO任务，会让主循环停滞一段时间。为了避免这种情况，我们使用了一个[1.x.251]的策略，即创建一个后台线程，在主循环被允许继续的情况下执行IO。为了使其发挥作用，我们必须注意两件事。

- 在运行 [2.x.520] 线程之前，我们必须创建一个状态向量 [2.x.521] 的副本。我们将其存储在向量 [2.x.522] 中。

- 我们必须避免后台线程中的任何MPI通信，否则程序可能会出现死锁。这意味着我们必须在工作线程之外运行后处理程序。







[1.x.252] 



如果设置了异步回写选项，我们会启动一个后台线程来执行所有的慢速IO到磁盘。在这种情况下，我们必须确保后台线程确实完成了运行。如果没有，我们必须等待它完成。我们用[1.x.253]启动上述背景线程，返回[1.x.254]对象。这个[2.x.523]对象包含了函数的返回值，在我们的例子中就是[2.x.524] 。







[1.x.255] 



在这一点上，我们制作了一份状态向量的副本，运行schlieren后处理器，并运行[2.x.525] 实际输出代码是标准的。我们创建一个DataOut实例，附加所有我们想要输出的数据向量，并调用[2.x.526]，但是有一个转折。为了在后台线程上执行异步IO，我们将DataOut<dim>对象创建为一个共享指针，传递给工作线程，以确保一旦我们退出这个函数，工作线程完成后，DataOut<dim>对象再次被销毁。







[1.x.256] 



接下来我们为后台线程创建一个lambda函数。我们[1.x.257][2.x.527]指针以及输出函数的大部分参数的值，这样我们就可以在lambda函数中访问它们。

[1.x.258] 



我们通过做与[1.x.259]讨论的精确的逆向操作来检查当前状态。







[1.x.260] 



如果设置了异步回写选项，我们在[1.x.261]函数的帮助下启动一个新的后台线程。该函数返回一个[1.x.262]对象，我们可以用它来查询后台线程的状态。此时，我们可以从[2.x.528]函数中返回，继续在主循环中进行时间步进--该线程将在后台运行。

[1.x.263] 



最后是主函数。







[1.x.264] 

[1.x.265] [1.x.266][1.x.267] 


在释放模式下，用默认参数运行程序，在4核机器上（带超线程）大约需要1分钟。

[1.x.268] 



一个明显的事实是，程序花了三分之二的执行时间计算图形粘度d_ij，大约三分之一的执行时间用于执行更新，其中计算通量[2.x.529]是昂贵的操作。预设的默认分辨率约为37k个网格点，相当于二维空间自由度约148k。解决方案的动画斯利安图看起来如下。

 [2.x.530]  

很明显，一阶方法的37k个网格点远远不能满足解决任何流动特征的需要。作为比较，这里有一个用二阶方法和大约9.5M网格点的 "参考 "计算（[1.x.269]）。

 [2.x.531]  

因此，我们再给一阶方法一个机会，在一个小型计算服务器上用大约240万个网格点运行它。

[1.x.270] 



而结果如下。

 [2.x.532]  

这大大改善了，当然，代价是在16个核心上运行了大约2个小时的代码。




[1.x.271] [1.x.272][1.x.273] 。


如上所述，这里展示的程序实际上只有一阶准确性。上面的图片说明了这引入了多少扩散，以及这个解决方案离真正解决我们所关心的特征有多远。

这一点是可以解决的，但这将超出一个*教程*的意义。然而，值得展示的是，通过增加一个二阶方案，我们可以实现什么。例如，这里有一段用[1.x.274]计算的视频，显示了（用不同的颜色方案）对应于上述情况的二维模拟。

[1.x.275] 



这个模拟是用3800万个自由度（连续的[2.x.533]有限元）的解向量的每个分量完成的。对于这类模拟来说，解决方案的精致细节是显著的，包括在障碍物后面的亚声速区域。

人们还可以相对容易地进一步扩展到三维情况。

[1.x.276] 



然而，解决这个问题变得很昂贵。仿真是以每个部件18.17亿个自由度（连续[2.x.534]有限元）完成的（总共90.9亿个空间自由度），在30,720个MPI等级上运行。该代码达到了平均每秒969万个网格点的吞吐量（每个CPU每秒0.04万个网格点）。前面和后面的墙显示了一个 "Schlieren图"：密度的梯度大小在一个从白色（低）到黑色（高）的指数级上。所有其他切面和障碍物表面都显示了白色（低）-黄色（中）-红色（高）尺度上的涡度大小。为了使视觉效果更好，各个切割面的比例已经被调整过了）。[1.x.277] [1.x.278] [2.x.535] 。 

 [2.x.536] 
