 [2.x.0] [2.x.1] 。 

本教程取决于 [2.x.2] , [2.x.3] 。

[1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12][1.x.13][1.x.14][1.x.15][1.x.16][1.x.17 ][1.x.18][1.x.19][1.x.20][1.x.21][1.x.22][1.x.23][1.x.24][1.x.25][1.x.26][1.x.27][1.x.28][1.x.29][1.x.30][1.x.31][1.x.32][1.x.33] 

 [2.x.4]  

[1.x.34] 

 [2.x.5]  

[1.x.35] [1.x.36] [1.x.37] 


[1.x.38][1.x.39]。


在本教程中，我们展示了如何用牛顿方法解决不可压缩的Navier Stokes方程（NSE）。我们在这里考虑的流动被假定为是稳定的。在一个域[2.x.6]，[2.x.7]，具有片状光滑边界[2.x.8]，和一个给定的力场[2.x.9]，我们寻求一个速度场[2.x.10]和压力场[2.x.11]，满足[1.x.40] 



与[2.x.12]中讨论的斯托克斯方程不同，由于对流项的存在，NSE是一个非线性方程组 [2.x.13] 。计算数值解的第一步是将系统线性化，这将用牛顿方法来完成。在[2.x.14]中讨论了一个随时间变化的问题，在这里，系统使用最后一个时间步骤的解进行线性化，不需要进行非线性解。

[1.x.41][1.x.42] 。


我们通过[1.x.43]定义一个非线性函数，其根是NSE的一个解。



假设初始猜测足以保证牛顿迭代的收敛性，并表示[2.x.15] ，牛顿对向量函数的迭代可以定义为[1.x.44] 



其中[2.x.16]是步骤[2.x.17]中的近似解，[2.x.18]代表上一步的解，[2.x.19]是在[2.x.20]处评价的雅各布矩阵。类似的迭代可以在 [2.x.21] 中找到。

牛顿迭代公式意味着新的解决方案是通过在旧的解决方案中加入更新项来获得的。我们不是评估雅各布矩阵并取其倒数，而是将更新项视为一个整体，即[1.x.45] 。



其中[2.x.22] 。

我们可以通过解决系统[1.x.46]来找到更新项 



这里，前一个方程的左边代表[2.x.23]沿[2.x.24]在[2.x.25]的方向梯度。根据定义，方向性梯度由[1.x.47]给出。



因此，我们得出了线性化系统。[1.x.48] 



其中[2.x.26]和[2.x.27]是上一次迭代的解。此外，第二个方程的右边不是零，因为离散解不完全是无发散的（连续解是无发散的）。这里的右手边作为一个修正，导致速度的离散解沿着牛顿的迭代是无发散的。在这个线性系统中，唯一的未知数是更新项[2.x.28]和[2.x.29]，我们可以使用类似于[2.x.30]中的策略（并以同样的方式推导出弱形式）。

现在，可以用牛顿迭代法来解决更新项。

 [2.x.31] [2.x.32] 初始化。初始猜测 [2.x.33] 和 [2.x.34] ，公差 [2.x.35] ； [2.x.36] [2.x.37] 线性求解计算更新项 [2.x.38] 和 [2.x.39] ； [2.x.40] [2.x.41] 更新近似。       [2.x.42] 和 [2.x.43] ; [2.x.44] [2.x.45] 检查残差规范。 [2.x.46] : [2.x.47] [2.x.48] 如果 [2.x.49] , 停止。[2.x.50] [2.x.51] 如果 [2.x.52] ，回到步骤2。[2.x.53] [2.x.54] [2.x.55] [2.x.56]  

[1.x.49][1.x.50]。


初始猜测需要足够接近解决方案，以使牛顿方法收敛；因此，找到一个好的起始值对非线性求解器至关重要。

当粘度[2.x.57]较大时，可以通过解决带有粘度的斯托克斯方程[2.x.58]来获得一个好的初始猜测。虽然与问题有关，但对于这里考虑的测试问题来说，这对[2.x.59]有效。

然而，如果粘度较小，对流项[2.x.60]将占主导地位，如试验例2中的[2.x.61]。 在这种情况下，我们使用延续法建立一系列的辅助NSE，其粘度接近于目标NSE中的粘度。相应地，我们建立一个[2.x.62]与[2.x.63]的序列 ，如果[2.x.66]较小，则接受两个具有粘度[2.x.64]和[2.x.65]的NSE的解接近。 然后，我们使用带有粘度的NSE的解决方案[2.x.67]作为带有[2.x.68]的NSE的初始猜测。这可以看作是一个从斯托克斯方程到我们要解决的NSE的阶梯。

也就是说，我们首先解决一个斯托克斯问题[1.x.51]。



来得到[1.x.52]的初始猜测。



这也是延续法的初始猜测。这里[2.x.69]相对较大，这样带粘度的斯托克斯问题的解[2.x.70]就可以作为牛顿迭代中NSE的初始猜测。

然后，[1.x.53]的解决方案 



的解作为[1.x.54]的初始猜测。



用实验确定的粘度序列[2.x.71]重复这个过程，这样最终的解可以作为牛顿迭代的初始猜测。

[1.x.55][1.x.56] 


在牛顿迭代的每一步，问题的结果是解决一个形式为[1.x.57]的鞍点系统。



这个系统矩阵具有与[2.x.72]中相同的块结构。然而，由于非线性项的存在，左上角的矩阵[2.x.73]并不是对称的。我们可以不求解上述系统，而求解等效系统[1.x.58] 。



的参数[2.x.74]和一个可逆矩阵[2.x.75] 。这里[2.x.76]是Augmented Lagrangian项，详见[1]。

用[2.x.77]表示新系统的系统矩阵，用[2.x.78]表示右手边，我们用右预处理[2.x.79]反复求解为[2.x.80] ，其中[1.x.59] 



与[2.x.81]，[2.x.82]是相应的舒尔补码[2.x.83] 。我们让[2.x.84]其中[2.x.85]是压力质量矩阵，那么[2.x.86]可以被[1.x.60]近似。



详见[1]。

我们将[2.x.87]分解为[1.x.61]。



这里将需要两个不精确的求解器，分别用于[2.x.88]和[2.x.89]，（见[1]）。由于压力质量矩阵是对称的和正定的，CG与ILU作为预处理程序适用于[2.x.90] 。为了简单起见，我们对[2.x.91]使用直接求解器UMFPACK。最后一个成分是与 [2.x.92] 的稀疏矩阵-向量乘积。我们不计算[2.x.93]中增强拉格朗日项的矩阵乘积，而是组装Grad-Div稳定化[2.x.94]，如[2]中所解释。

[1.x.62][1.x.63] 。


我们使用盖子驱动的空腔流作为我们的测试案例；详见[3]。计算域是单位平方，右手边是[2.x.95] 。边界条件为[1.x.64] 。



当解决这个问题时，误差由非线性误差（来自牛顿迭代）和离散化误差（取决于网格大小）组成。非线性部分随着牛顿的每次迭代而减少，离散化误差随着网格的细化而减少。在这个例子中，粗网的解被转移到连续的细网中，并作为初始猜测使用。因此，非线性误差总是低于牛顿迭代的容忍度，而离散化误差则随着每次网格细化而减少。

在这个循环中，我们涉及三个求解器：一个用于[2.x.96]，一个用于[2.x.97]和一个用于[2.x.98]。前两个求解器在预处理程序中被调用，外部求解器给我们提供了更新项。总体收敛性由非线性残差控制；由于牛顿方法不需要精确的雅各布，我们采用FGMRES，外侧线性求解器的相对公差仅为1e-4。事实上，我们对这个系统采用了截断的牛顿解法。正如[2.x.99]中所述，内部线性求解也不需要做得非常精确。这里我们使用CG，压力质量矩阵的相对公差为1e-6。正如预期的那样，我们仍然看到非线性残差收敛到了1e-14。另外，我们使用一个简单的线搜索算法来实现牛顿方法的全球化。

腔体参考值[2.x.100]和[2.x.101]分别来自[4]和[5]，其中[2.x.102]是雷诺数，可以定位在[8]。这里的粘度是由[2.x.103]定义的。尽管我们仍然可以找到[2.x.104]的解决方案，而且参考文献中也包含了用于比较的结果，但我们在这里的讨论仅限于[2.x.105] 。这是因为从[2.x.106]附近开始，解不再是静止的，而是变成了周期性的，详见[7]。

[1.x.65][1.x.66] 。

 [2.x.107]  

   [2.x.108] An Augmented Lagrangian-Based Approach to the Oseen Problem, M. Benzi and M. Olshanskii, SIAM J. SCI. COMPUT. COMPUT. 2006 [2.x.109] Efficient augmented Lagrangian-type preconditioning for the Oseen problem using Grad-Div stabilization, Timo Heister and Gerd Rapin [2.x.110] http://www.cfd-online.com/Wiki/Lid-driven_cavity_problem [2.x.111] High-Re solution for incompressible flow using the Navier-Stokes Equations and a Multigrid Method, U. Ghia, K. N. Ghia, and C. T. Shin[2.x.112 ] E. Erturk, T.C. Corke and C. Gokcol [2.x.113] 三维不可压缩Navier-Stokes方程的隐式加权ENO方案，Yang等人，1998 [2.x.114 ] 二维盖子驱动的空腔问题再探讨，C. Bruneau和M. Saad，2006 [2.x.115] https://en.wikipedia.org/wiki/Reynolds_number [2.x.116] [1.x.67] [1.x.68] 


[1.x.69][1.x.70] 。




像往常一样，我们首先包括一些著名的文件。

[1.x.71] 



为了在网格之间传输解决方案，包括了这个文件。

[1.x.72] 



这个文件包括UMFPACK：直接求解器。

[1.x.73] 



还有一个用于ILU预处理的文件。

[1.x.74] 




[1.x.75] [1.x.76] 




这个类管理介绍中描述的矩阵和向量：特别是，我们为当前的解决方案、当前的牛顿更新和线搜索更新存储一个BlockVector。 我们还存储了两个AffineConstraints对象：一个是强制执行Dirichlet边界条件的对象，另一个是将所有边界值设为0的对象。第一个约束解向量，第二个约束更新（即，我们从不更新边界值，所以我们强制相关的更新向量值为零）。

[1.x.77] 




[1.x.78][1.x.79] 。




在这个问题中，我们设定沿空腔上表面的速度为1，其他三面墙的速度为0。右边的函数为零，所以我们在本教程中不需要设置右边的函数。边界函数的分量数为 [2.x.117] 。我们最终将使用[2.x.118]来设置边界值，这就要求边界值函数的分量数与解相同，即使没有全部使用。换句话说：为了让这个函数高兴，我们为压力定义边界值，即使我们永远不会实际使用它们。

[1.x.80] 




[1.x.81] [1.x.82]    


正如介绍中所讨论的，Krylov迭代方法中的预处理器是作为一个矩阵-向量乘积算子实现的。在实践中，舒尔补码预处理器被分解为三个矩阵的乘积（如第一节所述）。第一个因素中的[2.x.119]涉及到对线性系统[2.x.120]的求解。在这里，为了简单起见，我们通过一个直接求解器来解决这个系统。第二个因素中涉及的计算是一个简单的矩阵-向量乘法。舒尔补码[2.x.121]可以被压力质量矩阵很好地近似，其逆值可以通过不精确求解器得到。因为压力质量矩阵是对称和正定的，我们可以用CG来解决相应的线性系统。

[1.x.83] 



我们可以注意到，左上角的矩阵逆的初始化是在构造函数中完成的。如果是这样，那么预处理程序的每一次应用就不再需要计算矩阵因子了。







[1.x.84] 




[1.x.85] [1.x.86] 

[1.x.87][1.x.88] 。   


该类的构造函数看起来与 [2.x.122] 中的构造函数非常相似。唯一的区别是粘度和增强的拉格朗日系数 [2.x.123] 。

[1.x.89] 




[1.x.90] [1.x.91] 。   


这个函数初始化DoFHandler，列举当前网格上的自由度和约束。

[1.x.92] 



第一步是将自由度与给定的网格相关联。

[1.x.93] 



我们对组件进行重新编号，使所有的速度DoFs排在压力DoFs之前，以便能够将解向量分成两个块，在块预处理程序中分别访问。

[1.x.94] 



在牛顿方案中，我们首先将边界条件应用于从初始步骤得到的解。为了确保边界条件在牛顿迭代过程中保持满足，在更新时使用零边界条件 [2.x.124] 。因此我们设置了两个不同的约束对象。

[1.x.95] 




[1.x.96] [1.x.97] 。   


在每个网格上，SparsityPattern和线性系统的大小都不同。这个函数在网格细化后初始化它们。

[1.x.98] 




[1.x.99] [1.x.100] 构建线性系统矩阵。   


这个函数建立了我们目前工作的系统矩阵和右手边。[2.x.125]参数用于决定我们应用哪一组约束（初始步骤为非零，其他为零）。[2.x.126]参数分别决定了是组装整个系统还是只组装右手边的向量。

[1.x.101] 



对于线性化系统，我们为当前速度和梯度以及当前压力创建临时存储。在实践中，它们都是通过其在正交点的形状函数获得的。







[1.x.102] 



装配类似于 [2.x.127] 。一个以gamma为系数的附加项是Augmented Lagrangian（AL），它是通过grad-div稳定化组装的。 正如我们在介绍中所讨论的，系统矩阵的右下块应该为零。由于压力质量矩阵是在创建预处理程序时使用的，所以我们在这里组装它，然后在最后把它移到一个单独的SparseMatrix中（与[2.x.128]相同）。

[1.x.103] 



最后我们将压力质量矩阵移到一个单独的矩阵中。

[1.x.104] 



注意，将这个压力块设置为零并不等同于不在这个块中装配任何东西，因为这里的操作将（错误地）删除从压力作用力的悬挂节点约束进来的对角线条目。这意味着，我们的整个系统矩阵将有完全为零的行。幸运的是，FGMRES处理这些行没有任何问题。

[1.x.105] 




[1.x.106] [1.x.107]    


在这个函数中，我们将FGMRES与程序开始时定义的块状预处理程序一起使用，以解决线性系统。我们在这一步得到的是解向量。如果这是初始步骤，解向量为我们提供了纳维尔-斯托克斯方程的初始猜测。对于初始步骤，非零约束被应用，以确保边界条件得到满足。在接下来的步骤中，我们将求解牛顿更新，所以使用零约束。

[1.x.108] 




[1.x.109][1.x.110]    


在粗略的网格上找到一个好的初始猜测后，我们希望通过细化网格来减少误差。这里我们做了类似于[2.x.129]的自适应细化，只是我们只使用速度的Kelly估计器。我们还需要使用SolutionTransfer类将当前的解转移到下一个网格。

[1.x.111] 



首先，DoFHandler被设置，约束被生成。然后我们创建一个临时的BlockVector [2.x.130] ，其大小与新网格上的解决方案一致。

[1.x.112] 



将解决方案从粗网格转移到细网格，并对新转移的解决方案应用边界值约束。注意，present_solution仍然是对应于旧网格的一个向量。

[1.x.113] 



最后设置矩阵和向量，并将present_solution设置为内插的数据。

[1.x.114] 




[1.x.115] [1.x.116]    


这个函数实现牛顿迭代，给定公差，最大迭代次数，以及要做的网格细化次数。   


参数[2.x.131]告诉我们是否需要[2.x.132]，以及哪一部分，系统矩阵或右手边的向量，应该被装配。如果我们做直线搜索，在最后一次迭代中检查残差准则时，右手边已经被组装起来了。因此，我们只需要在当前迭代中装配系统矩阵。最后一个参数[2.x.133]决定了是否应该产生图形输出。

[1.x.117] 



为了确保我们的解决方案越来越接近精确的解决方案，我们让解决方案用一个权重[2.x.134]进行更新，使新的残差小于上一步的残差，这在下面的循环中完成。这与 [2.x.135] 中使用的线搜索算法相同。

[1.x.118] 




[1.x.119] [1.x.120] 。   


这个函数将通过使用延续法为我们提供一个初始猜测，正如我们在介绍中讨论的那样。雷诺数被逐级增加[2.x.136]，直到我们达到目标值。通过实验，斯托克斯的解足以成为雷诺数为1000的NSE的初始猜测，所以我们从这里开始。 为了确保前一个问题的解决方案与下一个问题足够接近，步长必须足够小。

[1.x.121] 




[1.x.122][1.x.123] 。   


这个函数与[2.x.137]中的函数相同，只是我们为输出文件选择了一个也包含雷诺数（即当前背景下的粘度的倒数）的名称。

[1.x.124] 




[1.x.125][1.x.126] 。   


在我们的测试案例中，我们不知道分析解。该函数输出沿[2.x.138]和[2.x.139]的速度分量，因此可以与文献中的数据进行比较。

[1.x.127] 




[1.x.128] [1.x.129]。   


这是本程序的最后一步。在这一部分，我们分别生成网格和运行其他函数。最大细化值可以通过参数来设置。

[1.x.130] 



如果粘度小于[2.x.140]，我们必须首先通过延续法搜索一个初始猜测。我们应该注意的是，搜索总是在初始网格上进行的，也就是这个程序中的[2.x.141]网格。之后，我们只需做与粘度大于[2.x.142]时相同的工作：运行牛顿迭代，细化网格，转移解决方案，并重复。

[1.x.131] 



当粘度大于1/1000时，斯托克斯方程的解作为一个初始猜测已经足够好。如果是这样，我们就不需要用延续法来搜索初始猜测了。牛顿迭代可以直接开始。







[1.x.132] 

[1.x.133][1.x.134] 。


现在我们用上面讨论的方法来解决有粘度的Navier Stokes方程 [2.x.143] 和 [2.x.144] 。

[1.x.135] [1.x.136] 。


在第一个测试案例中，粘度被设置为[2.x.145] 。正如我们在介绍中所讨论的，初始猜测是相应的斯托克斯问题的解决方案。在下面的表格中，显示了每个网格上的牛顿迭代的残差。表中的数据表明，牛顿迭代的收敛性是四等的。

 [2.x.146]  








下面的数字显示了生成网格的顺序。对于[2.x.147]的情况，初始猜测是通过在[2.x.148]网格上求解斯托克斯得到的，网格是自适应细化的。在网格之间，粗网格的解被内插到细网格上作为初始猜测使用。

 [2.x.149]  

这张图是用 [2.x.150] 的盖子驱动空腔的图形流线结果。 [2.x.151]  

然后将该解与来自[4]的参考解进行比较，参考解数据可以在文件 "ref_2d_ghia_u.txt "中找到。

 [2.x.152]  

[1.x.137][1.x.138] 。


牛顿迭代需要一个良好的初始猜测。然而，当雷诺数很大时，非线性项占主导地位，因此，斯托克斯方程的解可能与精确解相去甚远。如果斯托克斯方程的解作为初始猜测，收敛性就会丧失。下图显示了非线性迭代被卡住，残差在进一步迭代中不再减少。

 [2.x.153]  

因此，初始猜测必须通过延续法获得，这在导言中已经讨论过。这里延续法的步长，即[2.x.154] ，为2000，初始网格大小为[2.x.155] 。在得到一个初始猜测后，如前一个测试案例一样，对网格进行细化。下图显示，在每次细化时，牛顿迭代都有二次收敛性。为了解决这个测试案例，共执行了52步牛顿迭代。

 [2.x.156]  

我们还显示了每个网格上牛顿迭代的每一步的残差。二次收敛的情况在表中清晰可见。

 [2.x.157]  








生成的网格序列看起来是这样的。 [2.x.158] 我们将我们的解决方案与[5]的参考解决方案进行比较。 [2.x.159] 下图显示了图形结果。 [2.x.160]  

此外，误差包括非线性误差（随着我们进行牛顿迭代而减少）和离散化误差（取决于网格大小）。这就是为什么我们必须细化网格并在下一个更细的网格上重复牛顿迭代。从上表中，我们可以看到在每个网格上的残差（非线性误差）都在1e-12以下，但是下图向我们展示了在随后的更细的网格上解的差异。

 [2.x.161]  

[1.x.139] 

[1.x.140][1.x.141]。


[1.x.142][1.x.143]。


很容易比较目前实现的线性求解器和仅仅使用UMFPACK来解决整个线性系统。你需要去除包含常数压力的空域，这在 [2.x.162] 中已经完成。更有趣的是与其他先进的预处理程序如PCD的比较。事实证明，这里的预处理器非常有竞争力，在论文[2]中可以看到。

下表显示了我们的迭代方法（FGMRES）与直接求解器（UMFPACK）之间的计时结果，整个系统的粘度设置为1/400。尽管我们在迭代求解器中的速度块使用了相同的直接求解器，但它的速度要快得多，消耗的内存也少。这在三维中会更加明显。

 [2.x.163]  


[1.x.144][1.x.145] 。


这段代码的设置也是为了在3d中运行。当然，参考值是不同的，例如，见[6]。高分辨率的计算在这个例子中是不可行的，因为速度块的直接求解器在三维中不能很好地工作。相反，需要一个基于代数或几何多网格的并行求解器。见下文。

[1.x.146][1.x.147] 。


对于较大的计算，特别是在三维中，有必要实现MPI并行求解器和预处理器。一个好的起点是[2.x.164]，它使用代数多重网格来实现斯托克斯方程的速度块。另一个选择是看一下[1.x.148]中的代码列表，其中已经包含了并行的纳维-斯托克斯求解器。[1.x.149] [1.x.150] [2.x.165]。 

 [2.x.166] 
