 [2.x.0][2.x.1] 。 

本教程取决于 [2.x.2] , [2.x.3] 。

[1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12][1.x.13][1.x.14][1.x.15][1.x.16][1.x.17][1.x.18][1.x.19 ][1.x.20][1.x.21][1.x.22][1.x.23][1.x.24][1.x.25][1.x.26][1.x.27][1.x.28][1.x.29][1.x.30][1.x.31][1.x.32][1.x.33][1.x.34][1.x.35][1.x.36][1.x.37][1.x.38] 

 [2.x.4]  

[1.x.39] [1.x.40] 




[1.x.41] [1.x.42][1.x.43]。


这个例子是[2.x.5]的扩展，考虑了三维接触问题，具有各向同性硬化的弹塑性材料行为。换句话说，它考虑的是，如果把一个刚性障碍物推入一个三维体（接触问题），其变形是由弹塑性材料法则（一种只能容纳一定最大应力的材料）支配的，随着变形的累积，该材料会硬化。为了说明我们打算做什么，在讨论太多细节之前，让我们只展示一张解决方案的图片（可变形体是一个立方体--实际上只显示了一半--，障碍物对应于一个汉字，下面会讨论）。

 [2.x.6]  


这个问题的描述意味着，与[2.x.7]相比，我们必须照顾到一个额外的非线性因素：材料行为。由于我们在这里考虑的是一个三维问题，我们还必须考虑到这样一个事实，即现在接触区域是在可变形体的边界，而不是在内部。最后，与[2.x.8]相比，在处理线性系统和不等式约束时，我们还必须处理悬挂节点的问题，因为我们希望使用自适应网格；在后一种情况下，我们将不得不处理优先考虑悬挂节点的约束还是不等式的约束更重要。

由于在三维空间中很容易达到几百万个自由度，即使使用自适应网格细化，我们决定使用Trilinos和p4est来并行运行我们的代码，在[2.x.9]的框架上进行并行化。其他并行化的指针可以在 [2.x.10] 中找到。


[1.x.44][1.x.45] 。


该问题的经典表述拥有以下形式。

[1.x.46] 

这里，这些方程中的第一个通过四阶顺应性张量[2.x.13]定义了应变[2.x.11]和应力[2.x.12]之间的关系；[2.x.14]提供了应变的塑性成分以确保应力不超过屈服应力。我们将只考虑各向同性的材料，对于这些材料，[2.x.15]可以用Lam&eacute;模量[2.x.16]和[2.x.17]表示，或者用体模量[2.x.18]和[2.x.19]表示。第二个方程是力的平衡；我们在这里将不考虑任何体力，并假定 [2.x.20] 。第三行的互补条件意味着如果[2.x.22]，则[2.x.21]，但当且仅当[2.x.24]，[2.x.23]可能是一个非零张量，特别是在这种情况下，[2.x.25]必须指向[2.x.26]方向。不等式[2.x.27]是一个事实的陈述，即塑性材料只能支持有限的应力；换句话说，如果外力会导致应力[2.x.29]，那么它们会产生塑性变形[2.x.30]的反应。这种[1.x.47]的典型形式是[2.x.31]，其中[2.x.32]是张量的偏离部分，[2.x.33]表示Frobenius规范。

进一步的方程描述了[2.x.34]上固定的零位移，在可能出现接触的表面[2.x.35]上，障碍物施加的法向力[2.x.36]是向内的（障碍物对我们的身体没有 "拉力"），切向分量为零[2.x.37] 。最后一个条件又是一个互补条件，意味着在[2.x.38]上，只有当身体与障碍物接触时，法向力才能非零；第二部分描述了障碍物和身体的不可穿透性。最后两个方程通常被称为Signorini接触条件。

大多数材料--尤其是金属--都有这样的特性，即它们在变形后会出现一些硬化。换句话说，[2.x.39]随着变形而增加。在实践中，导致硬化的不是弹性变形，而是塑性成分。有不同的构成法则来描述这些材料行为。最简单的称为线性各向同性硬化，由流动函数描述 [2.x.40] 。


[1.x.48] [1.x.49] 。


一般来说，处理不等式是相当笨拙的。在这里，我们必须处理两个问题：塑性和接触问题。正如本页顶部提到的论文中详细描述的那样，至少可以用一种方式重新表述塑性，使其看起来像一个非线性，然后我们可以用牛顿方法来处理。这在数学上略显棘手，因为非线性不只是一些平滑的函数，而是在应力达到屈服应力的地方有结点；然而，对于这种[1.x.50]函数，可以证明牛顿方法仍然收敛。

在不涉及细节的情况下，我们也将摆脱作为独立变量的应力，而只用位移来工作 [2.x.41] 。最终，这种重述的目的是我们希望最终得到一个对称的、正定的问题--比如一个线性化的弹性问题，其空间可变系数由塑性行为产生--需要在每个牛顿步骤中得到解决。我们希望如此，因为有高效和可扩展的方法来解决这样的线性系统，如用代数多重网格的CG预设。这与类似于混合拉普拉斯的鞍点问题（见[2.x.42]）相反，如果我们继续使用包含位移和应力的混合公式，我们会得到鞍点问题，对于这个问题，[2.x.43]已经提示了构建良好的求解器和预处理器是多么困难。

说到这里，让我们简单陈述一下我们在重构后得到的问题（同样，细节可以在论文中找到）。找到一个位移[2.x.44]，以便 

[1.x.51] 

其中投影仪[2.x.45]被定义为 

[1.x.52] 

而空间[2.x.46]是满足接触条件的所有位移的空间。

[1.x.53] 



在实际代码中，我们将使用缩写[2.x.47] 。

鉴于这种表述，我们将应用两种技术。

- 运行一个牛顿方法来迭代出投影仪中的非线性。

- 对接触条件运行一个主动集方法，与我们在[2.x.48]中的方式基本相同。

一个严格的方法是在我们迭代牛顿方法到收敛时保持活动集的固定（或者反过来：在进入下一个牛顿迭代之前找到最终的活动集）。在实践中，事实证明，每个活动集迭代只做一个牛顿步骤就足够了，所以我们将同时迭代它们。我们还将每隔一段时间细化一下网格。


[1.x.54][1.x.55] 


如前所述，我们将通过应用牛顿方法来处理算子[2.x.49]的非线性问题，尽管该算子在严格意义上是不可微的。然而，它满足了[1.x.56]的可微条件，这就足以使牛顿方法发挥作用。由此产生的方法被称为[1.x.57]，听起来令人印象深刻，但实际上只是一个牛顿方法应用于具有适当选择的 "导数 "的半光滑函数。

在当前情况下，我们将通过在每次迭代中求解[2.x.50]以下方程（仍然是不等式，但已线性化）来运行我们的迭代。

[1.x.58] 

其中，等级4张量[2.x.51]由以下公式给出 

[1.x.59] 

这个张量是[2.x.52]围绕[2.x.53]的（形式）线性化。对于我们这里考虑的线性各向同性材料，投影仪的体积和剪切分量由[1.x.60]给出 

其中[2.x.54]和[2.x.55]分别是等级为2和4的认同张量。

请注意，这个问题对应于一个线性弹性接触问题，其中[2.x.56]扮演着弹性张量[2.x.57]的角色。事实上，如果材料在某一点上没有塑性，那么[2.x.58] 。然而，在材料具有塑性的地方，[2.x.59]是一个空间变化的函数。在任何情况下，我们必须为牛顿迭代[2.x.60]解决的系统使我们更接近重写问题的目标，使我们能够使用众所周知的椭圆系统的求解器和预处理器。

作为对牛顿方法的最后说明，让我们提一下，正如牛顿方法常见的那样，我们需要通过控制步长来使其全球化。换句话说，虽然上面的系统求解的是[2.x.61]，但最终的迭代结果将是 

[1.x.61] 

其中右侧括号中的差值扮演了传统牛顿方向的角色，即[2.x.62]。我们将使用标准的直线搜索来确定[2.x.63]。


[1.x.62][1.x.63] 。


这个要在每个牛顿步骤中解决的线性化问题基本上与[2.x.64]一样。唯一的区别在于接触区是在边界而不是在域内。但这没有进一步的后果，所以我们参考[2.x.65]的文献，唯一的提示是[2.x.66]这次包含了接触边界[2.x.67]的所有顶点。和那里一样，我们需要做的是保持一个自由度子集的固定，导致额外的约束，可以写成一个鞍点问题。然而，正如论文中所讨论的，通过以适当的方式写这些约束，消除自由度之间的耦合，我们最终会得到一组节点，这些节点基本上只是附加了迪里希特值。


[1.x.64][1.x.65] 


上述算法结合了阻尼半光滑牛顿法（我们用于非线性构成法）和半光滑牛顿法，用于接触。它的工作原理如下。 [2.x.68] [2.x.69] 初始化主动集和非主动集 [2.x.70] 和 [2.x.71] ，使 [2.x.72] 和 [2.x.73] 并设置 [2.x.74] 。这里，[2.x.75]是位于可能发生接触的域的表面的所有自由度的集合。 起始值[2.x.76]满足我们的障碍条件，也就是说，我们将初始零位移投射到可行位移集上。

  [2.x.77] 组建牛顿矩阵 [2.x.78] 和右手边 [2.x.79] 。 这些对应于线性化的牛顿步骤，暂时忽略了接触不等式。

  [2.x.80] 找到满足[1.x.66]的原始-双重对[2.x.81] 。

 如同[2.x.82]，我们可以通过从第一个方程中消除[2.x.83]中的那些自由度来获得这个问题的解决方案，并得到一个线性系统[2.x.84]。




  [2.x.85] 通过应用直线搜索和计算[2.x.87]和[2.x.88]的线性组合来减弱[2.x.86]的牛顿迭代。这需要找到一个[2.x.89]，使[1.x.67] 

 满足[1.x.68]与[2.x.90]，除了(i)我们设置[2.x.92]的元素[2.x.91]，和(ii)对应悬挂节点的元素，我们以通常的方式消除。

  [2.x.93] 用[1.x.69]定义新的活动和非活动集。

 [1.x.70] 



  [2.x.94] 项目[2.x.95]，使其满足接触不等式，[1.x.71] 

 这里，[2.x.96]是[2.x.97]中的活动部件对间隙[1.x.72]的投影。

 其中[2.x.98]是[1.x.73]，表示障碍物与身体未位移配置的距离。

  [2.x.99] 如果[2.x.100]和[2.x.101]则停止，否则设置[2.x.102]并转到步骤（1）。这一步确保我们只有在找到正确的活动集和塑性已经迭代到足够的精度时才停止迭代。 [2.x.103]  

在该算法的第3步中，矩阵[2.x.104], [2.x.105]描述了位移和拉格朗日乘数（接触力）的基数的耦合，在我们的情况下它不是二次的，因为[2.x.106]只定义在[2.x.107]，即可能发生接触的表面。如文中所示，我们可以选择[2.x.108]是一个每行只有一个条目的矩阵，（另见H&uuml;eber, Wohlmuth: A primal-dual active set strategy for non-linear multibody contact problems, Comput. Method Appl. Mech. Engrg. 194, 2005, pp.3147-3166）。) 矢量[2.x.109]由间隙[2.x.111][1.x.74]的合适近似值定义。




[1.x.75][1.x.76] 。


由于我们的程序是在三维空间中运行的，程序所进行的计算是很昂贵的。因此，使用自适应网格细化是在可接受的运行时间内的一个重要步骤。为了使我们的生活更轻松，我们简单地选择已经在deal.II中实现的KellyErrorEstimator。我们把包含位移[2.x.112]的解向量交给它。正如我们将在结果中看到的，它产生了一个相当合理的接触区和塑性的自适应网格。


[1.x.77][1.x.78] 。


本教程基本上是[2.x.113]和[2.x.114]的混合体，但我们没有使用PETSc，而是让Trilinos库来处理线性代数的并行化问题（就像[2.x.115]中那样）。由于我们试图解决一个类似于[2.x.116]的问题，我们将使用同样的方法，但现在是并行的。

一个困难是如何处理来自Dirichlet条件的约束，悬挂的节点和由接触产生的不平等条件。为此，我们创建了三个AffineConstraints类型的对象，它们描述了各种约束条件，我们将在每次迭代中适当地组合。

与[2.x.117]相比，该程序有一些新的类。

 [2.x.118] [2.x.119] [2.x.120] 描述材料的塑性行为 

 [2.x.121] [2.x.122] 描述了一个球体，它作为障碍物被推入可变形的弹塑性体。  是用这个类还是下一个类来描述障碍物，由输入参数文件决定。

 [2.x.123] [2.x.124]（和一个辅助类）是一个允许我们从文件中读入障碍物的类。在我们将在结果部分展示的例子中，这个文件将是[2.x.125]，并对应于显示力或力量的中文、日文或韩文符号的数据（见http://www.orientaloutpost.com/："这个词可用于激励--它也可以意味着力量/运动/推动/力。它可以是任何使你继续前进的内部或外部事物。这是用中文表达动机的最安全方式。如果你的听众是日本人，请看另一个关于动机的条目。这是日语和韩语中的一个词，但它的意思是 "动力 "或 "动能"（没有你可能正在寻找的动机的意思）"）。实质上，我们将假装有一个印章（即对应于平底障碍物的面具，没有中间高度的碎片），我们把它压在身体里。有关的符号看起来如下（也可参见本节顶部的图片，了解最终结果是怎样的）。

   [2.x.126] [2.x.127]。 

除此以外，让我们只对以下方面进行评论。 [2.x.128] [2.x.129] 程序允许你通过参数文件从两个不同的粗略网格中选择。它们是立方体[2.x.130]或半球体，其开放面朝向正方向[2.x.131]。

 [2.x.132]在这两种情况下，我们将假定惯例，即可能与障碍物接触的边界部分具有边界指标一。对于这两种网格，我们假定这是一个自由表面，即身体要么在那里接触，要么没有力作用于它。对于半球体，弯曲部分的边界指标为零，我们在那里施加零位移。对于盒子，我们沿底部施加零位移，但允许沿边的垂直位移（尽管没有水平位移）。 [2.x.133][1.x.79][1.x.80]。


[1.x.81] [1.x.82] 这组包含文件在这个时候已经没有什么惊喜了。

[1.x.83] 



最后，我们包括两个系统头文件，让我们为输出文件创建一个目录。第一个头文件提供了[2.x.134]功能，第二个头文件让我们确定在[2.x.135]失败时发生了什么。

[1.x.84] 




[1.x.85] [1.x.86]。




这个类提供了一个构成法的接口，即应变 [2.x.136] 和应力 [2.x.137] 之间的关系。在这个例子中，我们使用的是具有线性、各向同性的硬化的弹塑性材料行为。这种材料的特点是杨氏模量 [2.x.138] ，泊松比 [2.x.139] ，初始屈服应力 [2.x.140] 和各向同性硬化参数 [2.x.141] 。 对于[2.x.142]，我们得到完美的弹塑性行为。   


正如描述这个程序的论文中所解释的，第一个牛顿步骤是用一个完全弹性的材料模型来解决的，以避免同时处理两种非线性（塑性和接触）。为此，这个类有一个函数[2.x.143]，我们以后用它来简单地设置[2.x.144]为一个非常大的值--基本上保证实际应力不会超过它，从而产生一个弹性材料。当我们准备使用塑性模型时，我们使用相同的函数，将[2.x.145]设置回其适当的值。 由于这种方法，我们需要将[2.x.146]作为这个类的唯一非静态成员变量。

[1.x.87] 



ConstitutiveLaw类的构造函数为我们的可变形体设置所需的材料参数。弹性各向同性介质的材料参数可以用多种方式定义，如一对[2.x.147]（弹性模量和泊松数），使用Lam&eacute;参数[2.x.148]或其他几个常用的约定。在这里，构造器以[2.x.149]的形式接受材料参数的描述，但由于这被证明不是出现在塑性投影仪方程中的系数，我们立即将它们转换为更合适的体模和剪模的集合[2.x.150]。 此外，构造器将[2.x.151]（无任何塑性应变的屈服应力）和[2.x.152]（硬化参数）作为参数。在这个构造器中，我们还计算了应力-应变关系的两个主成分及其线性化。

[1.x.88] 




[1.x.89] [1.x.90]。




这是构成法的主成分。它计算四阶对称张量，根据上面给出的投影，当在一个特定的应变点评估时，将应变与应力联系起来。我们需要这个函数来计算[2.x.153]中的非线性残差，我们将这个张量与正交点给出的应变相乘。计算遵循引言中列出的公式。在比较那里的公式和下面的实现时，记得[2.x.154]和[2.x.155] 。   


该函数返回正交点是否为塑性，以便在下游对有多少正交点是塑性的，有多少是弹性的进行一些统计。

[1.x.91] 




[1.x.92] [1.x.93] 




该函数返回线性化的应力应变张量，围绕前一个牛顿步骤[2.x.156]的解线性化 [2.x.157] 。 参数[2.x.158]（通常表示为[2.x.159]）必须作为参数传递，并作为线性化点。该函数在变量stress_strain_tensor中返回非线性构成法的导数，在stress_strain_tensor_linearized中返回线性化问题的应力-应变张量。 见[2.x.160]，其中使用了这个函数。

[1.x.94] 



[1.x.95]    


下面的内容应该是比较标准的。我们需要边界强迫项（这里选择为零）和不属于接触面的边界部分的边界值（这里也选择为零）的类。

[1.x.96] 




[1.x.97] [1.x.98] 




下面这个类是可以从输入文件中选择的两个障碍中的第一个。它描述了一个以位置[2.x.161]和半径[2.x.162]为中心的球体，其中[2.x.163]是可变形体的（平）表面的垂直位置。该函数的[2.x.164]返回给定[2.x.165]值的障碍物位置，如果该点实际位于球体下方，则返回一个不可能干扰变形的大正值，如果它位于球体的 "阴影 "之外。

[1.x.99] 



前面的断言 

[1.x.100] 




[1.x.101] [1.x.102]。




下面两个类描述了介绍中概述的障碍，即汉字。两个中的第一个，[2.x.166]负责从以pbm ascii格式存储的图片文件中读入数据。这个数据将被双线性插值，从而提供一个描述障碍物的函数。(下面的代码显示了如何通过在给定的数据点之间进行内插来构建一个函数。人们可以使用在本教程程序写完后引入的[2.x.167]，它正是我们在这里想要的，但看看如何用手来做是有启发的）。)      


我们从文件中读取的数据将被存储在一个名为 obstacle_data 的双倍数 [2.x.168] 中。 这个向量构成了计算单片双线性函数的基础，作为一个多项式插值。我们将从一个文件中读取的数据由零（白色）和一（黑色）组成。     


[2.x.169]变量表示[2.x.170]和[2.x.171]方向的像素间的间距。 [2.x.172]是这些方向上每个像素的数量。  [2.x.173]返回图像在给定位置的值，由相邻的像素值插值而成。

[1.x.103] 



该类的构造函数从给定的文件名中读入描述障碍物的数据。

[1.x.104] 



以下两个函数返回坐标为[2.x.174]的给定像素的值，我们将其与定义在位置[2.x.175]的函数值相识别，并在任意坐标[2.x.176]处对两个函数中第一个函数返回的点值做双线性插值。在第二个函数中，对于每个[2.x.177]，我们首先计算离[2.x.178]左下方最近的像素坐标的（整数）位置，然后计算这个像素内的坐标[2.x.179]。我们从下方和上方截断这两种变量，以避免在评估函数时超出其定义的范围而可能发生的舍入误差问题。

[1.x.105] 



最后，这是一个实际使用上面的类的类。它有一个BitmapFile对象作为成员，描述障碍物的高度。如上所述，BitmapFile类将为我们提供一个掩码，即要么是0要么是1的值（如果你要求的是像素之间的位置，则是在0和1之间插值的值）。这个类将其转化为高度，即低于可变形体表面的0.001（如果BitmapFile类在此位置报告为1）或高于障碍物的0.999（如果BitmapFile类报告为0）。那么下面的函数应该是不言自明的。

[1.x.106] 



前面的断言 

[1.x.107] 




[1.x.108] [1.x.109]。




这是本程序的主类，提供描述非线性接触问题所需的所有函数和变量。它接近于[2.x.180]，但有一些额外的功能，如处理悬挂节点，牛顿方法，使用Trilinos和p4est进行并行分布式计算。处理悬空节点使生活变得有点复杂，因为我们现在需要另一个AffineConstraints对象。我们为接触情况下的主动集合方法创建一个牛顿方法，并处理构成法的非线性算子。   


这个类的总体布局与其他大多数教程程序非常相似。为了使我们的生活更容易一些，这个类从输入文件中读取一组输入参数。这些参数，使用ParameterHandler类，在[2.x.181]函数中声明（该函数是静态的，因此它可以在我们创建当前类型的对象之前被调用），然后一个已经用于读取输入文件的ParameterHandler对象将被传递给该类的构造函数。   


其余的成员函数大体上与我们在其他几个教程程序中看到的一样，尽管为当前的非线性系统增加了一些内容。我们将在下面进一步讨论它们的目的时进行评论。

[1.x.110] 



就成员变量而言，我们先用这些变量来表示这个程序运行的MPI宇宙，用一个流来让一个处理器产生输出到控制台（见[2.x.182]），还有一个变量用来为程序的各个部分计时。

[1.x.111] 



下一组描述了网格和有限元空间。特别是，对于这个并行程序，有限元空间有与之相关的变量，表明哪些自由度存在于当前的处理器上（索引集，也见[2.x.183]和[2.x.184]文档模块），以及各种约束：那些由悬挂节点、由Dirichlet边界条件和由接触节点的活动集施加的约束。在这里定义的三个AffineConstraints变量中，第一个只包含悬挂节点的约束，第二个也包含与Dirichlet边界条件相关的约束，第三个则是这些约束加上接触约束。     


变量[2.x.185]包括那些由接触约束的自由度，我们用[2.x.186]来跟踪每个单元上应力等于屈服应力的正交点的分数。后者仅用于创建显示塑性区的图形输出，而不是用于任何进一步的计算；该变量是该类的成员变量，因为该信息是作为计算残差的副产品计算的，但仅在很久之后才使用。(注意，该向量是一个长度等于[1.x.112]上活动单元数量的向量；它从未被用来在处理器之间交换信息，因此可以是一个普通的deal.II向量)。

[1.x.113] 



下一个变量块对应的是解决方案和我们需要形成的线性系统。特别是，这包括牛顿矩阵和右手边；对应于残差（即牛顿右手边）但我们没有消除各种约束的向量，该向量用于确定在下一次迭代中需要约束哪些自由度；以及对应于介绍中简要提及并在随文讨论的[2.x.187]矩阵对角线的向量。

[1.x.114] 



下一个块包含描述材料响应的变量。

[1.x.115] 



然后是各种各样的其他变量，用于识别参数文件所选择的要求我们建立的网格，被推入可变形体的障碍物，网格细化策略，是否将解决方案从一个网格转移到下一个网格，以及要执行多少个网格细化循环。在可能的情况下，我们将这些类型的变量标记为[2.x.188]，以帮助读者识别哪些变量以后可能会被修改，哪些可能不会被修改（输出目录是一个例外--它在构造函数之外从不被修改，但在构造函数中冒号后面的成员初始化列表中初始化是很尴尬的，因为在那里我们只有一次机会设置它；网格细化准则也是如此）。

[1.x.116] 




[1.x.117] [1.x.118] 。





[1.x.119] [1.x.120]。




让我们从声明可在输入文件中选择的运行时参数开始。这些值将在这个类的构造函数中读回，以初始化这个类的成员变量。

[1.x.121] 




[1.x.122] [1.x.123] 




考虑到成员变量的声明以及从输入文件中读取的运行时参数的声明，这个构造函数中没有任何令人惊讶的地方。在主体中，我们初始化了网格细化策略和输出目录，如果有必要，可以创建这样一个目录。

[1.x.124] 



如果有必要，为输出创建一个新的目录。

[1.x.125] 




[1.x.126] [1.x.127] 




下一个区块涉及到构建起始网格。我们将使用下面的辅助函数和[2.x.189]的第一块来构造一个对应于半球形的网格。deal.II有一个函数可以创建这样的网格，但是它的位置和方向都是错误的，所以我们需要在使用它之前对它进行一些移动和旋转。   


供以后参考，如[2.x.190]的文件中所述，半球体的平坦表面的边界指标为0，而其余部分的边界指标为1。

[1.x.128] 



由于我们将在下面附加一个不同的流形，所以我们立即清除默认的流形描述。

[1.x.129] 



或者，创建一个超立方体网格。创建后，按如下方式分配边界指标。 [2.x.191] 换句话说，立方体的边的边界指标是8。底部的边界指标是6，顶部的指标是1。我们通过循环所有面的所有单元并查看单元中心的坐标值来设置这些指标，并在以后评估哪个边界将携带迪里希特边界条件或将受到潜在接触时利用这些指标。(在目前的情况下，网格只包含一个单元，它的所有面都在边界上，所以严格来说，所有单元的循环和查询一个面是否在边界上都是不必要的；我们保留它们只是出于习惯：这种代码可以在许多程序中找到，基本上都是这种形式。) 

[1.x.131] 




[1.x.132] [1.x.133] 




拼图的下一块是设置DoFHandler，调整向量大小，并处理其他各种状态变量，如索引集和约束矩阵。   


在下文中，每一组操作都被放入一个大括号封闭的块中，该块被块顶部声明的变量计时（[2.x.192]变量的构造器开始计时部分，在块的末端调用的析构器又停止计时）。

[1.x.134] 



最后，我们设置了稀疏模式和矩阵。我们暂时（ab）用系统矩阵来同时建立（对角线）矩阵，用于消除与障碍物接触的自由度，但我们随后立即将牛顿矩阵设为零。

[1.x.135] 




[1.x.136][1.x.137] 




这个函数是从前面的函数中分解出来的，它计算与迪里希勒型边界条件相关的约束，并通过与来自悬挂节点的约束合并，将它们放入[2.x.193]变量中。   


正如介绍中所述，我们需要区分两种情况。

- 如果领域是一个盒子，我们将底部的位移设置为零，并允许沿侧面的Z方向的垂直运动。如[2.x.194]函数所示，前者对应于边界指标6，后者对应于8。

- 如果域是一个半球形，那么我们沿边界的弯曲部分施加零位移，与边界指标0相关。

[1.x.138] 



对解决方案的所有分量进行插值 

[1.x.139] 



插值解决方案的X和Y分量（这是一个位掩码，所以应用运算器）。

[1.x.140] 




[1.x.141] [1.x.142]. 




下一个辅助函数计算（对角线）质量矩阵，用于确定我们在接触算法中使用的主动集方法的主动集。这个矩阵是质量矩阵类型的，但与标准质量矩阵不同，我们可以通过使用正交公式使其成为对角线（甚至在高阶元素的情况下），该公式的正交点与有限元的插值点所在的位置完全一致。我们通过使用QGaussLobatto正交公式来实现这一点，同时用一组从同一正交公式得出的插值点初始化有限元。该函数的其余部分相对简单：我们将得到的矩阵放入给定的参数中；因为我们知道矩阵是对角线的，所以只需在[2.x.195]而不是[2.x.196]上有一个循环即可。严格来说，我们甚至可以避免在正交点[2.x.197]处将形状函数的值与自己相乘，因为我们知道形状值是一个正好有一个一的向量，当与自己相点时产生一。由于这个函数不是时间关键，为了清楚起见，我们添加了这个术语。

[1.x.143] 




[1.x.144][1.x.145] 。




以下函数是我们在[2.x.198]函数中每次牛顿迭代时调用的第一个函数。它的作用是将解决方案投射到可行集上，并更新接触或穿透障碍物的自由度的活动集。   


为了实现这个功能，我们首先需要做一些记账工作。我们需要写进解决方案向量（我们只能用没有鬼魂元素的完全分布的向量来写），我们需要从各自的向量中读取拉格朗日乘数和对角线质量矩阵的元素（我们只能用确实有鬼魂元素的向量来写），所以我们创建各自的向量。然后我们还初始化约束对象，该对象将包含来自接触和所有其他来源的约束，以及一个包含属于接触的所有局部自由度的索引集的对象。

[1.x.146] 



第二部分是在所有单元上的循环，在这个循环中，我们看每一个定义了自由度的点，是否活动集条件为真，我们需要把这个自由度添加到接触节点的活动集上。正如我们一直所做的，如果我们想在单个点上评估函数，我们用一个FEValues对象（或者，这里是FEFaceValues对象，因为我们需要检查表面的接触）和一个适当选择的正交对象来做。我们通过选择定义在单元格面上的形状函数的 "支持点 "来创建这个面的正交对象（关于支持点的更多信息，请参见这个[2.x.199]"词汇表条目"）。因此，我们有多少个正交点就有多少个面的形状函数，在正交点上循环就相当于在面的形状函数上循环。有了这个，代码看起来如下。

[1.x.147] 



在每个正交点（即位于接触边界上的自由度的每个支持点），我们再问它是否是z-位移自由度的一部分，如果我们还没有遇到这个自由度（这可能发生在面之间的边缘上的自由度），我们需要评估变形物体与障碍物之间的差距。如果活动集条件为真，那么我们在AffineConstraints对象中添加一个约束，下一次牛顿更新需要满足该约束，将解向量的相应元素设置为正确的值，并将索引添加到IndexSet对象中，该索引存储哪个自由度是接触的一部分。

[1.x.148] 



在这个函数的最后，我们在处理器之间交换数据，更新[2.x.200]变量中那些被其他处理器写入的幽灵元素。然后，我们将Dirichlet约束和那些来自悬挂节点的约束合并到已经包含活动集的AffineConstraints对象中。我们通过输出主动约束自由度的总数来结束这个函数，对于这个自由度，我们对每个处理器拥有的主动约束自由度的数量进行加总。这个本地拥有的受限自由度的数量当然是活动集和本地拥有的自由度集的交集的元素数量，我们可以通过在两个IndexSets上使用[2.x.201]得到。

[1.x.149] 




[1.x.150] [1.x.151]。




考虑到问题的复杂性，可能会让人感到惊讶的是，在每次牛顿迭代中，我们必须解决的线性系统的组合实际上是相当简单的。下面的函数建立了牛顿的右手边和牛顿矩阵。它看起来相当简单，因为繁重的工作发生在对[2.x.202]的调用中，特别是在[2.x.203]中使用我们之前计算的约束。

[1.x.152] 



在计算了应力-应变张量及其线性化之后，我们现在可以把矩阵和右手边的部分组合起来。在这两者中，我们需要线性化的应力-应变张量乘以[2.x.204]的对称梯度，即术语[2.x.205]，所以我们引入这个术语的缩写。回顾一下，该矩阵对应于随附出版物的符号中的双线性形式[2.x.206]，而右手边是[2.x.207]，其中[2.x.208]是当前的线性化点（通常是最后的解决方案）。这可能表明，如果材料是完全弹性的（其中[2.x.209]），右手边将为零，但这忽略了一个事实，即右手边还将包含由于接触而产生的非均质约束的贡献。                   


接下来的代码块增加了由于边界力而产生的贡献，如果有的话。

[1.x.153] 




[1.x.154] [1.x.155] 




下面的函数计算给定当前解（或任何其他线性化点）的方程的非线性残差。这在线性搜索算法中是需要的，我们需要尝试先前和当前（试验）解的各种线性组合来计算当前牛顿步骤的（真实的、全局化的）解。   


这就是说，在略微滥用函数名称的情况下，它实际上做了更多的事情。例如，它还计算对应于牛顿残差的向量，但不消除受限自由度。我们需要这个向量来计算接触力，并最终计算出下一个活动集。同样，通过跟踪我们在每个单元上遇到的显示塑性屈服的正交点的数量，我们也可以计算出[2.x.210]矢量，随后我们可以输出这个矢量来可视化塑性区。在这两种情况下，作为线条搜索的一部分，这些结果是不必要的，因此我们可能会浪费少量的时间来计算它们。同时，无论如何，这些信息是作为我们在这里需要做的事情的自然副产品出现的，而且我们想在每个牛顿步骤结束时收集一次，所以我们不妨在这里做。   


这个函数的实际实现应该是相当明显的。

[1.x.156] 




[1.x.157] [1.x.158] 。




在我们讨论单个网格上的实际牛顿迭代之前的最后一块是线性系统的求解器。有几个复杂的问题使代码略显模糊，但大多数情况下，它只是设置然后求解。其中的复杂情况包括。

   




- 对于悬空节点，我们必须将[2.x.211]函数应用于newton_rhs。如果求解值为[2.x.212]的悬空节点有一个与障碍物接触的邻居[2.x.213]和一个没有接触的邻居[2.x.214]，这是必须的。因为前者的更新将是规定的，所以悬挂的节点约束将有一个不均匀性，看起来像 [2.x.215] 。所以右侧的相应条目是无意义的非零值。这些值我们必须设置为零。

- 和[2.x.216]一样，在求解或使用解决方案时，我们需要在有和没有鬼魂元素的向量之间进行洗牌。   


该函数的其余部分与[2.x.217]和[2.x.218]类似，只是我们使用BiCGStab求解器而不是CG。这是由于对于非常小的硬化参数[2.x.219]，线性系统变得几乎是半无限的，尽管仍然是对称的。BiCGStab似乎更容易处理这种线性系统。

[1.x.159] 




[1.x.160] [1.x.161]。




最后，这是一个在当前网格上实现阻尼牛顿法的函数。有两个嵌套的循环：外循环用于牛顿迭代，内循环用于直线搜索，只有在必要时才会使用。为了获得一个好的和合理的起始值，我们在每个网格上的第一个牛顿步骤中解决一个弹性问题（如果我们在网格之间转移解决方案，则只在第一个网格上解决）。我们通过在这些迭代中将屈服应力设置为一个不合理的大值，然后在随后的迭代中将其设置回正确的值。   


除此以外，这个函数的顶部部分应该是相当明显的。我们将变量[2.x.220]初始化为可以用双精度数字表示的最负值，这样，比较当前残差是否小于上一步的残差，在第一步中总是失败。

[1.x.162] 



在我们计算了当前牛顿步骤的试解[2.x.221]之后，情况就变得有点棘手了。我们处理的是一个高度非线性的问题，所以我们必须用直线搜索的方式来抑制牛顿方法。为了理解我们是如何做到这一点的，请回忆一下，在我们的公式中，我们在每一个牛顿步骤中计算一个试解，而不是新旧解之间的更新。由于解集是一个凸集，我们将使用直线搜索，尝试以前的解和试验解的线性组合，以保证阻尼解再次出现在我们的解集中。我们最多应用5个阻尼步骤。         


当我们使用直线搜索时，有一些例外情况。首先，如果这是任何网格上的第一个牛顿步骤，那么我们就没有任何点来比较残差，所以我们总是接受一个完整的步骤。同样地，如果这是第一个网格上的第二个牛顿步骤（如果我们不在网格之间转移解决方案，则是任何网格上的第二个牛顿步骤），那么我们只用弹性模型计算了其中的第一个步骤（见上文我们如何将屈服应力σ设置为一个不合理的大值）。在这种情况下，第一个牛顿解是一个纯粹的弹性解，第二个牛顿解是一个塑性解，任何线性组合都不一定会位于可行的集合中--所以我们只是接受我们刚刚得到的解。         


在这两种情况中的任何一种，我们都绕过直线搜索，只是在必要时更新残差和其他向量。

[1.x.163] 



最后一步是检查收敛性。如果活动集在所有处理器中没有变化，并且残差小于阈值[2.x.222] ，那么我们就终止在当前网格上的迭代。

[1.x.164] 




[1.x.165] [1.x.166] 迭代结束。




如果你已经在deal.II教程中走到这一步，下面这个细化网格的函数应该不会再对你构成任何挑战。它对网格进行细化，可以是全局的，也可以是使用Kelly误差估计器的，如果这样要求的话，还可以将上一个网格的解转移到下一个网格。在后一种情况下，我们还需要再次计算活动集和其他数量，为此我们需要由 [2.x.223] 计算的信息。

[1.x.167] 



强制执行约束条件，使插值后的解在新的网格上符合要求。

[1.x.168] 




[1.x.169] [1.x.170] 。




在我们到达[2.x.224]之前的其余三个函数都与生成输出有关。下面一个是尝试显示变形体的变形构造。为此，这个函数接收一个位移矢量场，通过先前计算的位移来移动网格（局部）的每个顶点。在生成图形输出之前，我们将以当前的位移场调用这个函数，在生成图形输出之后，我们将以负的位移场再次调用这个函数来撤销对网格的改变。   


这个函数本身是非常简单的。我们所要做的就是跟踪我们已经接触过的顶点，因为我们在单元格上循环时多次遇到相同的顶点。

[1.x.171] 




[1.x.172][1.x.173] 。




接下来是我们用来实际生成图形输出的函数。这个函数有点繁琐，但实际上并不特别复杂。它在顶部移动网格（最后再移回来），然后计算沿接触面的接触力。我们可以通过取未处理的残差向量，并通过询问它们是否有与之相关的不均匀约束来确定哪些自由度对应于有接触的自由度（如随文所示）。像往常一样，我们需要注意的是，我们只能写进完全分布的向量（即没有鬼魂元素的向量），但当我们想产生输出时，我们需要的向量确实对所有本地相关的自由度都有鬼魂条目。

[1.x.174] 



接触力的计算 

[1.x.175] 



在函数的其余部分，我们在每个处理器上生成一个VTU文件，以该处理器的子域ID为索引。在第一个处理器上，我们随后也创建了一个[2.x.225]文件，对VTU文件的[1.x.176]进行索引，这样就可以一次性读取整个输出文件集。这些[2.x.226]被Paraview用来描述整个并行计算的输出文件。然后我们再为Paraview的竞争者--VisIt可视化程序做同样的事情，创建一个匹配的[2.x.227]文件。

[1.x.177] 




[1.x.178] [1.x.179]。




这最后一个辅助函数通过计算接触面积上Z方向的接触压力的积分来计算接触力。为此，我们将所有非活动因子的接触压力lambda设置为0（一个自由度是否是接触的一部分，就像我们在前一个函数中所做的那样确定）。对于所有活动的自由度，lambda包含非线性残差（newton_rhs_uncondensed）和质量矩阵（diag_mass_matrix_vector）的相应对角线条目的商数。因为悬空节点出现在接触区的可能性不小，所以对分布式_lambda向量应用constraints_hanging_nodes.distribution是很重要的。

[1.x.180] 




[1.x.181][1.x.182] 。




和其他所有的教程程序一样，[2.x.228]函数包含整体逻辑。这里没有太多的内容：本质上，它在所有的网格细化循环中执行循环，并在每个循环中，将事情交给[2.x.229]中的牛顿求解器，并调用函数来创建如此计算的解决方案的图形输出。然后输出一些关于运行时间和内存消耗的统计数据，这些数据是在这个网格的计算过程中收集的。

[1.x.183] 




[1.x.184] [1.x.185] 




[2.x.230]函数真的没有什么内容。看起来他们总是这样。

[1.x.186] 

[1.x.187][1.x.188] 。


包含这个程序的目录还包含一些输入参数文件，可以用来创建各种不同的模拟。例如，用[2.x.231]参数文件（用球作为障碍物，用盒子作为领域）在16个核心上运行该程序，会产生这样的输出。

[1.x.189] 



每个周期末尾的表格显示了最近一个网格细化周期的计算时间（这些数字当然是特定于产生该输出的机器的）和程序不同部分的调用次数，如装配或计算残差。上面的一些数字可以通过将解决方案从一个网格转移到下一个网格来改善，我们在这里没有行使这个选项。当然，你也可以通过使用更多的处理器来使程序运行得更快，尤其是在后期的细化周期中：附带的论文显示了至少1000个内核的良好扩展性。

在一个典型的运行中，你可以看到，对于每一个细化步骤，活动集--接触点--首先被迭代出来。之后，牛顿方法只需要解决塑性问题。对于更细的网格，在最后4或5次牛顿迭代中可以看到二次收敛。

我们不会在这里详细讨论每个输入文件的情况。相反，让我们只展示解决方案的图片（如果单元格的正交点为零，塑性不等式处于活动状态，则域的左半部分被省略）。

 [2.x.232]  

图片显示了自适应细化以及细胞在与球接触过程中被塑化的程度。请记住，我们考虑每个正交点的应力偏差部分的规范，以查看是否有弹性或塑性行为。蓝色意味着这个单元只包含弹性正交点，与所有正交点都被塑化的红色单元相反。在顶面的中间--网格最细的地方--非常仔细地看可以看到由障碍物引起的凹陷。这就是[2.x.233]函数的结果。然而，由于我们在这里考虑的障碍物的压痕非常小，所以很难辨别这种效果；可以玩玩将网格的顶点位移为计算位移的倍数。

关于使用这个程序可以得到的结果的进一步讨论，见本页最上面提到的出版物。


[1.x.190] [1.x.191][1.x.192]。


像往常一样，有多种可能性来扩展这个程序。从算法的角度来看，这个程序在写的时候就已经走得很远了，使用了接触不等式、塑性非线性和线性求解器的最佳可用算法。然而，就更现实的情况而言，人们希望用这个程序做一些事情。 [2.x.234] [2.x.235] 将程序从静态扩展到准静态情况，也许可以通过选择后向-欧拉模式来进行时间离散化。一些理论结果可以在Jörg Frohne的博士论文中找到，[1.x.193]，德国锡根大学，2011。

 [2.x.236] 考虑有摩擦的接触问题也是一个有趣的进展。在几乎每个机械过程中，摩擦都有很大的影响。 为了模拟这种情况，我们必须考虑到接触面的切向应力。摩擦也给我们的问题增加了另一个不等式，因为只要切向应力不超过某个极限，身体和障碍物通常会粘在一起，超过这个极限，两个身体就会互相滑过。

 [2.x.237]如果我们已经模拟了摩擦性接触，下一步要考虑的是接触区的发热。由两个物体之间的摩擦引起的热量提高了可变形物体的温度，并引起一些材料参数的变化。

 [2.x.238] 对于接触和塑性，实施更精确的、与问题相适应的误差估计器可能是有意义的。 [2.x.239] [1.x.194] [1.x.195] [2.x.240]。 

 [2.x.241] 
