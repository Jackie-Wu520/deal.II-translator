 [2.x.0] [2.x.1]。 

本教程取决于 [2.x.2] 。

[1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12][1.x.13][1.x.14][1.x.15][1.x.16][1.x.17][1.x.18][1.x.19][1.x.20][1.x.21][1.x.22][1.x.23][1.x.24][1.x.25] 

 [2.x.3]  

[1.x.26] 

 [2.x.4] 为了运行这个程序，deal.II必须被配置为使用UMFPACK稀疏直接解算器。请参考[1.x.27]中的说明如何做到这一点。

[1.x.28] [1.x.29][1.x.30]。


这个程序展示了如何使用Runge-Kutta方法来解决一个时间相关问题。它解决了在[2.x.5]中首先讨论的热方程的一个小变化，但由于这个程序的目的只是演示使用更高级的方法与deal.II的时间步进算法对接，所以只解决了均匀细化网格上的一个简单问题。


[1.x.31][1.x.32] 。


在这个例子中，我们求解中子输运方程的单组时间依赖的扩散近似（时间依赖的多组扩散见[2.x.6]）。这是一个关于中子如何在高散射介质中移动的模型，因此它是时间依赖性扩散方程的一个变体--它只是[2.x.7]中讨论的热方程的不同名称，加上一些额外的条款。我们假设介质是不可逆的，因此，中子通量满足以下方程。[1.x.33] 

用适当的边界条件来增强。这里，[2.x.8]是中子的速度（为简单起见，我们假设它等于1，这可以通过简单地缩放时间变量来实现），[2.x.9]是扩散系数，[2.x.10]是吸收截面，[2.x.11]是一个源。因为我们只对时间依赖性感兴趣，我们假设[2.x.12]和[2.x.13]是常数。

由于本程序只打算演示如何使用先进的时间步进算法，我们将只寻找相对简单问题的解决方案。具体来说，我们要在一个正方形域[2.x.14]上寻找解，其形式为[1.x.34] 。

通过使用二次有限元，我们可以在任何特定时间精确地表示这个函数，所有的误差都是由于时间离散化造成的。我们这样做是因为这样就很容易观察到我们将要考虑的各种时间步进方案的收敛顺序，而不需要将空间和时间误差分开。

我们施加以下边界条件：[2.x.15]和[2.x.16]的同质Dirichlet条件，[2.x.17]和[2.x.18]的同质Neumann条件。我们选择源项，使相应的解实际上是上述形式。[1.x.35] 

因为解是时间上的正弦，我们知道精确解满足[2.x.19] 。因此，时间[2.x.20]的误差只是数值解的规范，即[2.x.21]，而且特别容易评估。在代码中，我们评估[2.x.22]的节点值的规范，而不是相关空间函数的[2.x.24]规范，因为前者的计算更简单；然而，在均匀网格上，两者只是由一个常数相关，因此我们可以用任何一种方式观察时间收敛顺序。


[1.x.36][1.x.37] 


在deal.II中实现的Runge-Kutta方法假定要解决的方程可以写成：。[1.x.38] 

另一方面，当使用有限元时，离散化的时间导数总是导致左手边存在一个质量矩阵。这可以很容易地看出，如果上式中的解向量[2.x.25]实际上是一个形式为[1.x.39]的变量的节点系数向量[2.x.26]的话 

与空间形状函数[2.x.27]，然后将形式为[1.x.40]的方程乘以测试函数。

检验函数，对[2.x.28]进行积分，代入[2.x.29]并将检验函数限制在上面的[2.x.30]中，那么这个空间离散方程的形式为[1.x.41] 

其中[2.x.31]是质量矩阵，[2.x.32]是[2.x.33]的空间离散版本（其中[2.x.34]通常是空间导数出现的地方，但鉴于我们只考虑时间导数，这一点目前还不太关心）。换句话说，如果我们写成[1.x.42]，这种形式符合上述的一般方案 



Runk-Kutta方法是一种时间步进方案，通过特定的一步法近似于[2.x.35]。它们通常被写成[1.x.43]的形式 

其中对于上面的右手边的形式[1.x.44] 

这里[2.x.36] ，[2.x.37] ，和[2.x.38]是已知的系数，确定你要使用哪种特定的Runge-Kutta方案，[2.x.39]是使用的时间步长。Runge-Kutta类的不同时间步长方法在级数[2.x.40]和系数[2.x.41]、[2.x.42]和[2.x.43]上有所不同，但由于可以查找这些系数的表格值，所以很容易实现。这些表格通常被称为Butcher tableaus）。

在编写本教程时，deal.II中实现的方法可以分为三类。 [2.x.44] [2.x.45] 显式Runge-Kutta；为了使一个方法成为显式，必须在上述定义[2.x.46]的公式中，[2.x.47]不出现在右侧。换句话说，这些方法必须满足 [2.x.48] 。 [2.x.49] 嵌入式（或自适应）Runge-Kutta；我们将在下面讨论其特性。 [2.x.50] 隐式Runge-Kutta；这类方法需要解决一个可能是非线性系统的上述阶段 [2.x.51] ，即它们至少有 [2.x.52] 一个阶段 [2.x.53] 。 [2.x.54] 许多众所周知的时间步进方案，人们通常不会将其与Runge或Kutta的名字联系起来，事实上，它们也可以用这些类别来表达。它们往往代表了这些家族的最低阶成员。


[1.x.45][1.x.46] 


这些方法，只需要一个函数来评估[2.x.55]，但不需要（作为隐式方法）来解决涉及[2.x.56]的[2.x.57]的方程。与所有显式时间步长方法一样，当选择的时间步长过大时，它们会变得不稳定。

这一类的知名方法包括正向欧拉法、三阶Runge-Kutta法和四阶Runge-Kutta法（通常缩写为RK4）。


[1.x.47][1.x.48] 。


这些方法同时使用低阶和高阶方法来估计误差并决定是否需要缩短时间步长或可以增加时间步长。术语 "嵌入 "是指低阶方法不需要对函数进行额外的评估[2.x.58]，而是重复使用那些必须为高阶方法计算的数据。换句话说，它基本上是免费的，而我们得到的误差估计是使用高阶方法的副产品。

这类方法包括Heun-Euler、Bogacki-Shampine、Dormand-Prince（在Matlab中为ode45，通常缩写为RK45，表示这里使用的低阶和高阶方法分别为4阶和5阶Runge-Kutta方法）、Fehlberg和Cash-Karp。

在撰写本文时，只有嵌入式显式方法得到了实现。


[1.x.49][1.x.50] 


隐式方法要求在每个（子）时间步中解决[2.x.59]和[2.x.60]形式的（可能是非线性）系统。在内部，这是用牛顿式方法完成的，因此，他们要求用户提供能够评估[2.x.61]和[2.x.62]或等同于[2.x.63]的函数。

这个算子的特殊形式来自于这样一个事实，即每一个牛顿步骤都需要解决一个形式的方程 

[1.x.51] 

对于一些（给定的）[2.x.64] 。无论时间步长如何，隐式方法总是稳定的，但过大的时间步长当然会影响解的[1.x.52]，即使数值解仍然稳定且有界。

这类方法包括后退欧拉法、隐含中点法、Crank-Nicolson法和两阶段SDIRK法（"单对角隐含Runge-Kutta "的简称，这个术语是用来表示定义时间步长方法的对角线元素[2.x.65]都是相等的；这个特性使得牛顿矩阵[2.x.66]可以在各阶段之间重复使用，因为[2.x.67]每次都相同）。


[1.x.53][1.x.54] 。


通过将我们的模型问题的解决方案扩展为总是使用形状函数[2.x.68]并写出[1.x.55] 

我们立即得到扩散方程的空间离散化版本[1.x.56] 。

其中[1.x.57] 

参见[2.x.69]和[2.x.70]以了解我们是如何到达这里的。由于当前问题所选择的边界条件，边界项是没有必要的。为了使用Runge-Kutta方法，我们将其改写如下。[1.x.58] 

在代码中，我们需要能够评估这个函数[2.x.71]及其导数，[1.x.59] 。




[1.x.60][1.x.61] 。


为了简化问题，域是二维的，网格是均匀细化的（不需要调整网格，因为我们使用二次有限元，而且精确的解是二次的）。从二维域到三维域并不是很有挑战性。然而，如果你打算解决更复杂的问题，必须调整网格（例如，在[2.x.72]中的做法），那么必须记住以下问题。

 [2.x.73] [2.x.74] 当网格改变时，你需要将解决方案投影到新的网格上。当然，从每个时间步长的开始到结束，所使用的网格应该是相同的，这个问题的出现是因为Runge-Kutta方法在每个时间步长内使用了多次方程求值。 [2.x.75] 每次改变网格时，你都需要更新质量矩阵和它的逆值。 [2.x.76] 这些步骤的技术可以通过查看 [2.x.77] 随时获得。[1.x.62] [1.x.63] 。


[1.x.64] [1.x.65] 。




第一个任务照例是包括这些著名的deal.II库文件和一些C++头文件的功能。

[1.x.66] 



这是唯一一个新的包含文件：它包括所有的Runge-Kutta方法。

[1.x.67] 



下一步就像以前所有的教程程序一样。我们把所有东西放到一个自己的命名空间中，然后把deal.II的类和函数导入其中。

[1.x.68] 




[1.x.69][1.x.70] 




下一块是主类的声明。这个类中的大多数函数并不新鲜，在以前的教程中已经解释过了。唯一有趣的函数是 [2.x.78] 和 [2.x.79] 评估扩散方程， [2.x.80] ，在给定时间和给定 [2.x.81] 。 [2.x.82] 在给定的时间和给定的[2.x.85]和[2.x.86]下，评估[2.x.83]或等价的[2.x.84] 。当使用隐式方法时，需要这个函数。

[1.x.71] 



接下来的三个函数分别是显式方法、隐式方法和嵌入式显式方法的驱动。嵌入显式方法的驱动函数返回执行的步数，鉴于它只接受作为参数传递的时间步数作为提示，但内部计算了最佳时间步数本身。

[1.x.72] 



我们选择二次有限元，我们初始化参数。

[1.x.73] 




[1.x.74] [1.x.75] 现在，我们创建约束矩阵和稀疏模式。然后，我们初始化矩阵和求解向量。

[1.x.76] 




[1.x.77] [1.x.78] 在这个函数中，我们计算 [2.x.87] 和质量矩阵 [2.x.88] 。然后使用直接求解器对质量矩阵进行反演；然后[2.x.89]变量将存储质量矩阵的反值，这样[2.x.90]就可以使用该对象的[2.x.91]函数应用于一个矢量。在内部，UMFPACK并没有真正存储矩阵的逆，而是存储它的LU因子；应用逆矩阵就相当于用这两个因子做一次正解和一次逆解，这与应用矩阵的显式逆具有相同的复杂性）。

[1.x.79] 




[1.x.80][1.x.81] 。   


在这个函数中，计算给定时间和给定点的方程的源项。

[1.x.82] 




[1.x.83][1.x.84] 。   


接下来，我们评估在给定时间 [2.x.92] 和给定矢量 [2.x.93] 的扩散方程的弱形式。换句话说，正如介绍中所述，我们评估 [2.x.94] 。为此，我们必须将矩阵[2.x.95]（先前计算并存储在变量[2.x.96]中）应用于[2.x.97]，然后添加源项，我们像通常那样进行积分。(如果你想节省几行代码，或者想利用并行积分的优势，可以用[2.x.98]来进行积分。) 然后将结果乘以[2.x.99] 。

[1.x.85] 




[1.x.86] [1.x.87] 。   


我们计算出[2.x.100] 。这要分几个步骤进行。

- 计算[2.x.101]。 

- 反转矩阵，得到[2.x.102] 。 

- 计算[2.x.103] 。 

- 计算[2.x.104] 。 

- 返回z。

[1.x.88] 




[1.x.89][1.x.90] 。   


然后，下面的函数在vtu文件中输出解决方案，该文件以时间步长的数字和时间步长方法的名称为索引。当然，所有的时间步长方法的（精确）结果应该是一样的，但这里的输出至少可以让我们对它们进行比较。

[1.x.91] 




[1.x.92] [1.x.93]    


这个函数是所有显式方法的驱动。在顶部，它初始化了时间步长和解决方案（通过将其设置为零，然后确保边界值和悬挂节点约束得到尊重；当然，对于我们在这里使用的网格，悬挂节点约束实际上并不是一个问题）。然后调用[2.x.105]，执行一个时间步骤。时间是通过DiscreteTime对象来存储和增加的。   


对于显式方法，[2.x.106]需要评估[2.x.107]，即，它需要[2.x.108]。因为[2.x.109]是一个成员函数，它需要被绑定到[2.x.110]。在每个进化步骤之后，我们再次应用正确的边界值和悬挂节点约束。   


最后，每隔10个时间步骤输出解决方案。

[1.x.94] 




[1.x.95] [1.x.96] 这个函数等同于[2.x.111]，但用于隐式方法。当使用隐式方法时，我们需要评估[2.x.112]和[2.x.113]，为此我们使用之前介绍的两个成员函数。

[1.x.97] 




[1.x.98] [1.x.99] 这个函数是嵌入式显式方法的驱动。它需要更多的参数。

- coarsen_param：当误差低于阈值时，乘以当前时间步骤的系数。

- refine_param：当误差高于阈值时，乘以当前时间步长的系数。

- min_delta：可接受的最小的时间步长。

- max_delta：可接受的最大时间步长。

- refine_tol：超过阈值的时间步长被细化。

- coarsen_tol：阈值，低于此阈值的时间步长将被粗化。   


嵌入式方法使用一个猜测的时间步长。如果使用这个时间步长的误差太大，时间步长将被缩小。如果误差低于阈值，下一个时间步长将尝试更大的时间步长。 [2.x.114]是由嵌入方法产生的猜测时间步长。总之，时间步长有可能通过三种方式修改。

- 在[2.x.115]内减少或增加时间步长  

- 使用计算出的[2.x.116] 。

- 自动调整最后一个时间步骤的步长，以确保模拟在[2.x.117]处精确结束。这种调整是在DiscreteTime实例中处理的。

[1.x.100] 




[1.x.101] [1.x.102] 。   


下面是程序的主要功能。在顶部，我们创建网格（一个[0,5]x[0,5]的正方形）并对其进行四次细化，得到一个有16乘16单元的网格，总共256个。 然后我们将边界指标设置为1，用于[2.x.118]和[2.x.119]的那些边界部分。

[1.x.103] 



接下来，我们设置线性系统并为其填充内容，以便在整个时间步进过程中使用它们。

[1.x.104] 



最后，我们使用命名空间TimeStepping中实现的几种Runge-Kutta方法解决扩散问题，每次都在结束时间输出误差。正如介绍中所解释的，由于精确解在最后时间为零，所以误差等于数值解，只需取解向量的[2.x.120]准则就可以计算出来）。

[1.x.105] 




[1.x.106] [1.x.107]。




下面的[2.x.121]函数与前面的例子类似，不需要注释。

[1.x.108] 

[1.x.109][1.x.110] 。


这个程序的重点不在于显示特定的结果，而在于显示它是如何做到的。这一点我们已经通过讨论上面的代码证明了。因此，该程序的输出相对较少，只包括控制台输出和用于可视化的VTU格式的解决方案。

控制台输出包含错误，对于某些方法，还包含它们所执行的步骤数。

[1.x.111] 



正如预期的那样，高阶方法给出了（更）准确的解决方案。我们还看到，（相当不准确的）Heun-Euler方法增加了时间步骤的数量，以满足公差。另一方面，其他嵌入式方法使用的时间步数比规定的要少得多。[1.x.112] [1.x.113] [2.x.122]。 

 [2.x.123] 
