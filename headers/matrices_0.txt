
























 [2.x.0]   @defgroup Matrices Matrix classes 

 deal.II comes with a number of different matrix classes, tailored to the  various purposes for which matrices are used. For example, there are full  matrices, sparse matrices using different storage schemes, matrices  composed of individual blocks, and matrices implemented as interfaces to  other linear algebra classes. As far as possible, all these implementations  share a common interface that contains at least the operations necessary to  write iterative linear solvers (see  [2.x.1] ), but also element-wise  access to read from and write to a matrix. 

 This module is split into different parts.  [2.x.2]  "Basic matrices"  contains all the matrix classes actually storing entries.  [2.x.3]   "Derived matrices", on the other hand, only use basic matrices, but  implement certain operations on them. For example, TransposeMatrix provides  a matrix-vector multiplication that acts as if the underlying matrix had  been transposed, without actually ever storing a transposed matrix. 

  [2.x.4]  are matrix classes as well, since they perform linear  operations on vectors. 

 @ingroup LAC / 


 [2.x.5]   @defgroup Matrix1 Basic matrices 

 These are the actual matrix classes provided by deal.II. It is possible to  store values in them and retrieve them. Furthermore, they provide the full  interface required by linear solvers (see  [2.x.6] ). 

 Among the matrices in this group are full matrices, different sparse  matrices, and block matrices. In addition, some of the classes in the  interfaces to other linear algebra libraries (for example the  PETScWrappers) are matrices. 

 Most of the deal.II sparse matrix classes are separated from their sparsity  patterns, to make storing several matrices with the same sparsity pattern  more efficient. See  [2.x.7]  for more information. 

 @ingroup Matrices / 


 [2.x.8]   @defgroup Matrix2 Derived matrices 

 These matrices are built on top of the basic matrices. They perform special  operations using the interface defined by   [2.x.9]  "the MatrixType concept". 

 @ingroup Matrices /
